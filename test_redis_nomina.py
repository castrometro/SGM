#!/usr/bin/env python3
"""
Script de prueba para el sistema de cache Redis de n√≥mina
=========================================================

Prueba la funcionalidad completa:
1. Conexi√≥n a Redis DB 2
2. Env√≠o de informes a Redis
3. Recuperaci√≥n desde Redis
4. Estad√≠sticas del cache

Uso:
    python test_redis_nomina.py
"""

import os
import sys
import django

# Configurar Django
sys.path.append('/root/SGM/backend')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

from nomina.models_informe import InformeNomina
from nomina.cache_redis import get_cache_system_nomina
from nomina.models import CierreNomina
import json
from datetime import datetime

def test_redis_connection():
    """Probar conexi√≥n b√°sica a Redis"""
    print("üîç Probando conexi√≥n a Redis DB 2...")
    
    try:
        cache_system = get_cache_system_nomina()
        health = cache_system.health_check()
        
        print(f"‚úÖ Conexi√≥n: {health['status']}")
        print(f"üìä Redis conectado: {health['redis_connected']}")
        if 'redis_version' in health:
            print(f"üêß Versi√≥n Redis: {health['redis_version']}")
            print(f"üíæ Memoria usada: {health['used_memory']}")
        
        return health['redis_connected']
        
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False

def test_envio_informe():
    """Probar env√≠o de informe a Redis"""
    print("\nüöÄ Probando env√≠o de informe a Redis...")
    
    try:
        # Buscar el √∫ltimo informe generado
        informe = InformeNomina.objects.select_related('cierre', 'cierre__cliente').first()
        
        if not informe:
            print("‚ùå No hay informes disponibles para probar")
            return False
        
        print(f"üìã Informe encontrado: {informe.cierre.cliente.nombre} - {informe.cierre.periodo}")
        
        # Enviar a Redis
        resultado = informe.enviar_a_redis(ttl_hours=1)  # TTL corto para pruebas
        
        if resultado['success']:
            print(f"‚úÖ Enviado exitosamente a Redis")
            print(f"üîë Clave: {resultado['clave_redis']}")
            print(f"üìè Tama√±o: {resultado['size_kb']:.1f} KB")
            print(f"‚è∞ TTL: {resultado['ttl_hours']} horas")
            return True
        else:
            print(f"‚ùå Error: {resultado['error']}")
            return False
            
    except Exception as e:
        print(f"‚ùå Excepci√≥n: {e}")
        return False

def test_recuperacion_redis():
    """Probar recuperaci√≥n desde Redis"""
    print("\nüì• Probando recuperaci√≥n desde Redis...")
    
    try:
        # Usar el primer cierre disponible
        cierre = CierreNomina.objects.select_related('cliente').first()
        
        if not cierre:
            print("‚ùå No hay cierres disponibles")
            return False
        
        print(f"üîç Buscando en Redis: cliente={cierre.cliente.id}, periodo={cierre.periodo}")
        
        # Recuperar desde Redis
        datos_redis = InformeNomina.obtener_desde_redis(
            cierre.cliente.id, 
            cierre.periodo
        )
        
        if datos_redis:
            print("‚úÖ Datos encontrados en Redis")
            print(f"üìä Cliente: {datos_redis.get('cliente_nombre', 'N/A')}")
            print(f"üìÖ Per√≠odo: {datos_redis.get('periodo', 'N/A')}")
            print(f"üë• Dotaci√≥n: {datos_redis.get('kpis_principales', {}).get('dotacion_total', 'N/A')}")
            print(f"üí∞ Costo empresa: ${datos_redis.get('kpis_principales', {}).get('costo_empresa_total', 0):,.0f}")
            
            cached_at = datos_redis.get('_metadata', {}).get('cached_at', 'N/A')
            print(f"‚è∞ Cacheado el: {cached_at[:19] if cached_at != 'N/A' else 'N/A'}")
            
            return True
        else:
            print("‚ùå No se encontraron datos en Redis para este cliente/per√≠odo")
            return False
            
    except Exception as e:
        print(f"‚ùå Excepci√≥n: {e}")
        return False

def test_estadisticas_cache():
    """Probar estad√≠sticas del cache"""
    print("\nüìà Probando estad√≠sticas del cache...")
    
    try:
        cache_system = get_cache_system_nomina()
        stats = cache_system.get_cache_stats()
        
        print("üìä Estad√≠sticas de Redis:")
        print(f"  üîë Total de claves: {stats.get('total_keys', 0)}")
        print(f"  üíæ Memoria usada: {stats.get('redis_info', {}).get('used_memory', 'N/A')}")
        print(f"  üë• Clientes conectados: {stats.get('redis_info', {}).get('connected_clients', 0)}")
        
        print("\nüìä Contadores de n√≥mina:")
        counters = stats.get('nomina_counters', {})
        for key, value in counters.items():
            print(f"  üìà {key}: {value}")
        
        print("\nüë§ Claves por cliente:")
        clients = stats.get('keys_by_client', {})
        for cliente_id, count in clients.items():
            print(f"  üë§ Cliente {cliente_id}: {count} claves")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error obteniendo estad√≠sticas: {e}")
        return False

def test_operaciones_cache():
    """Probar operaciones espec√≠ficas del cache"""
    print("\nüõ†Ô∏è Probando operaciones del cache...")
    
    try:
        cache_system = get_cache_system_nomina()
        
        # Datos de prueba
        cliente_id = 999
        periodo = "2025-07"
        
        print(f"üìù Enviando datos de prueba: cliente={cliente_id}, periodo={periodo}")
        
        # Datos de prueba para KPIs
        kpis_test = {
            'dotacion_total': 100,
            'costo_empresa_total': 50000000,
            'rotacion_porcentaje': 5.2,
            'ausentismo_porcentaje': 8.1
        }
        
        # Enviar KPIs
        success_kpis = cache_system.set_kpis_nomina(cliente_id, periodo, kpis_test, ttl=300)
        print(f"  üìä KPIs enviados: {'‚úÖ' if success_kpis else '‚ùå'}")
        
        # Recuperar KPIs
        kpis_recuperados = cache_system.get_kpis_nomina(cliente_id, periodo)
        if kpis_recuperados:
            print(f"  üìä KPIs recuperados: ‚úÖ")
            print(f"    üë• Dotaci√≥n: {kpis_recuperados.get('dotacion_total', 'N/A')}")
        else:
            print(f"  üìä KPIs recuperados: ‚ùå")
        
        # Limpiar datos de prueba
        deleted = cache_system.invalidate_cliente_periodo(cliente_id, periodo)
        print(f"  üóëÔ∏è Datos de prueba eliminados: {deleted} claves")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en operaciones: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("=" * 60)
    print("üß™ PRUEBAS SISTEMA CACHE REDIS N√ìMINA")
    print("=" * 60)
    
    # Ejecutar todas las pruebas
    tests = [
        ("Conexi√≥n Redis", test_redis_connection),
        ("Env√≠o informe", test_envio_informe),
        ("Recuperaci√≥n Redis", test_recuperacion_redis),
        ("Estad√≠sticas cache", test_estadisticas_cache),
        ("Operaciones cache", test_operaciones_cache)
    ]
    
    resultados = []
    
    for nombre, test_func in tests:
        try:
            resultado = test_func()
            resultados.append((nombre, resultado))
        except Exception as e:
            print(f"‚ùå Error cr√≠tico en {nombre}: {e}")
            resultados.append((nombre, False))
    
    # Resumen final
    print("\n" + "=" * 60)
    print("üìã RESUMEN DE PRUEBAS")
    print("=" * 60)
    
    exitosas = 0
    for nombre, resultado in resultados:
        status = "‚úÖ EXITOSA" if resultado else "‚ùå FALLIDA"
        print(f"{status:12} | {nombre}")
        if resultado:
            exitosas += 1
    
    print(f"\nüéØ Total: {exitosas}/{len(resultados)} pruebas exitosas")
    
    if exitosas == len(resultados):
        print("üéâ ¬°TODAS LAS PRUEBAS PASARON! El sistema est√° listo.")
    elif exitosas > 0:
        print("‚ö†Ô∏è Algunas pruebas fallaron. Revisar configuraci√≥n.")
    else:
        print("üí• TODAS LAS PRUEBAS FALLARON. Verificar conexi√≥n Redis.")

if __name__ == "__main__":
    main()
