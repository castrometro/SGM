version: "3.9"

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:7.2.5
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data  # ← AGREGADO: Persistencia para Redis
    command: redis-server --appendonly yes  --requirepass ${REDIS_PASSWORD} # ← AGREGADO: Habilitar persistencia
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD} 
    env_file:
    - .env
  # ← NUEVO: RedisInsight para análisis y métricas
  redisinsight:
    image: redislabs/redisinsight:latest
    ports:
      - "8001:5540"
    volumes:
      - redisinsight_data:/db
    environment:
      - RIPORT=5540
      - RIHOST=0.0.0.0
      - RIUSER=${REDISINSIGHT_USER}
      - RIPASSWORD=${REDISINSIGHT_PASS}
      - RIENCRYPTION=true
      - RITLS=false  # ← Sin TLS hacia Redis
      - RISSL=false  # ← Sin SSL hacia Redis
    env_file:
      - .env
    depends_on:
      - redis
    restart: unless-stopped

  django:
    build:
      context: ./backend
    command: bash -c "python manage.py migrate && python manage.py collectstatic --noinput && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    env_file:
      - .env  
    depends_on:
      - db
      - redis

  celery_worker:
    build:
      context: ./backend
    command: ./celery_worker.sh
    volumes:
      - ./backend:/app
    environment:
      - DJANGO_SETTINGS_MODULE=sgm_backend.settings
      - SECRET_KEY=${SECRET_KEY}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}  # ← AGREGAR: Solo la contraseña
    env_file:
      - .env  # ← AGREGAR: Para que lea las variables del .env
    depends_on:
      - db
      - redis

  flower:
    image: mher/flower
    command: python -m celery --broker=redis://:${REDIS_PASSWORD}@redis:6379/0 flower
    ports:
      - "5555:5555"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - FLOWER_UNAUTHENTICATED_API=true  # ← Habilitar API sin autenticación para desarrollo
      - FLOWER_PERSISTENT=true
      - FLOWER_STATE_SAVE_INTERVAL=10000
    env_file:
      - .env
    depends_on:
      - redis
      - celery_worker

  streamlit_conta:
    build:
      context: .
      dockerfile: streamlit_conta/streamlit.Dockerfile
    volumes:
      - ./streamlit_conta:/app
    ports:
      - "8502:8502"
    environment:
      - PORT=8502
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB_CONTABILIDAD=1
    depends_on:
      - redis

  streamlit_nomina:
    build:
      context: .
      dockerfile: streamlit_nomina/streamlit.Dockerfile
    volumes:
      - ./streamlit_nomina:/app
    ports:
      - "8503:8503"
    environment:
      - PORT=8503
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB_NOMINA=2
    depends_on:
      - redis


  n8n:
    image: docker.n8n.io/n8nio/n8n:latest
    restart: always
    ports:
      - "5678:5678"
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_HOST=db
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_HOST=${N8N_HOST}
      - N8N_PORT=5678
      - N8N_COOKIE=${N8N_COOKIE}
      - N8N_PROTOCOL=http
      - GENERIC_TIMEZONE=Europe/Berlin
      - N8N_RUNNERS_ENABLED=true
      - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=true
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      - db
      - redis
    env_file:
      - .env


volumes:
  postgres_data:
  redis_data:        # ← NUEVO: Persistencia para Redis
  redisinsight_data: # ← NUEVO: Configuración de RedisInsight
  n8n_data:          # ← NUEVO: Persistencia para N8N