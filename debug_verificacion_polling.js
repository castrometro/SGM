/**
 * Script de depuraci√≥n para el problema de actualizaci√≥n del componente VerificacionControl
 * 
 * Ejecuta este script en la consola del navegador para verificar:
 * 1. Si el polling se est√° ejecutando
 * 2. Si las llamadas a la API est√°n funcionando
 * 3. Si los callbacks se est√°n ejecutando correctamente
 */

console.clear();
console.log('üîç SCRIPT DE DEPURACI√ìN - VERIFICACION POLLING');
console.log('===============================================');

// Verificar si hay polling activos
const checkPollingIntervals = () => {
  console.log('\nüì° VERIFICANDO INTERVALS ACTIVOS:');
  
  // En React Dev Tools, buscar intervalos activos
  const intervalCount = setInterval(() => {}, 1000);
  clearInterval(intervalCount);
  console.log(`üîç √öltimo interval ID creado: ${intervalCount}`);
  
  // Esto nos da una idea de cu√°ntos intervals podr√≠an estar corriendo
  console.log('üí° TIP: Revisa React DevTools > Profiler para ver re-renders');
};

// Verificar estado del cierre en localStorage o sessionStorage
const checkCierreState = () => {
  console.log('\nüìä VERIFICANDO ESTADO DEL CIERRE:');
  
  // Buscar datos del cierre en el DOM
  const cierreElements = document.querySelectorAll('[data-testid*="cierre"], [class*="cierre"]');
  console.log(`üîç Elementos relacionados con cierre encontrados: ${cierreElements.length}`);
  
  // Buscar texto que indique el estado del cierre
  const textContent = document.body.textContent;
  const estadosEncontrados = textContent.match(/(creado|archivos_pendientes|archivos_completos|verificacion_datos|con_discrepancias|sin_discrepancias|verificado_sin_discrepancias|datos_consolidados)/g);
  if (estadosEncontrados) {
    console.log('üéØ Estados de cierre encontrados en la p√°gina:', [...new Set(estadosEncontrados)]);
  }
};

// Verificar llamadas de API en Network
const checkNetworkCalls = () => {
  console.log('\nüåê MONITOREO DE LLAMADAS API:');
  console.log('Abre las DevTools > Network y filtra por:');
  console.log('‚Ä¢ XHR/Fetch');
  console.log('‚Ä¢ Busca llamadas a /nomina/');
  console.log('‚Ä¢ Especialmente: obtenerEstadoDiscrepanciasCierre');
  console.log('‚Ä¢ Y: actualizarEstadoCierreNomina');
  
  // Interceptar fetch para logging
  const originalFetch = window.fetch;
  window.fetch = function(...args) {
    const url = args[0];
    if (typeof url === 'string' && url.includes('/nomina/')) {
      console.log('üì° API Call detectada:', url);
    }
    return originalFetch.apply(this, args);
  };
  
  console.log('‚úÖ Interceptor de API activado - ver√°s logs de llamadas /nomina/');
};

// Verificar logs del componente
const checkComponentLogs = () => {
  console.log('\nüìù LOGS A BUSCAR EN CONSOLA:');
  console.log('üîç Busca estos mensajes:');
  console.log('‚Ä¢ [VerificacionControl] useEffect polling');
  console.log('‚Ä¢ [VerificacionControl] Polling autom√°tico #X');
  console.log('‚Ä¢ [cargarEstadoDiscrepancias] Iniciando carga');
  console.log('‚Ä¢ [actualizarEstadoCierre] Iniciando actualizaci√≥n');
  console.log('‚Ä¢ [CierreProgresoNomina] Actualizando cierre desde verificador');
  
  console.log('\nüö® ERRORES COMUNES A VERIFICAR:');
  console.log('‚Ä¢ "No hay callback onCierreActualizado disponible"');
  console.log('‚Ä¢ "No hay ID de cierre disponible"');
  console.log('‚Ä¢ "Error en polling autom√°tico"');
};

// Funci√≥n para forzar re-render del componente
const forceReRender = () => {
  console.log('\nüîÑ FORZANDO RE-RENDER:');
  console.log('Ejecuta esto en la consola si quieres forzar una actualizaci√≥n:');
  console.log('window.location.reload(); // Recarga completa');
  console.log('// O busca el bot√≥n de actualizar estado y haz clic');
};

// Verificar si el estado del cierre cambi√≥ recientemente
const checkRecentStateChanges = () => {
  console.log('\n‚è∞ VERIFICANDO CAMBIOS RECIENTES:');
  
  // Buscar timestamps o indicadores de √∫ltima actualizaci√≥n
  const badges = document.querySelectorAll('.badge, [class*="badge"], [class*="status"]');
  badges.forEach((badge, index) => {
    console.log(`üè∑Ô∏è Badge ${index}:`, badge.textContent.trim());
  });
  
  console.log('\nüí° PASOS PARA VERIFICAR:');
  console.log('1. ¬øVes el spinner de "generando" o "procesando"?');
  console.log('2. ¬øEl estado en el header cambi√≥?');
  console.log('3. ¬øHay n√∫meros de discrepancias visibles?');
  console.log('4. ¬øLos botones est√°n habilitados/deshabilitados correctamente?');
};

// Ejecutar todas las verificaciones
const runAllChecks = () => {
  checkPollingIntervals();
  checkCierreState();
  checkNetworkCalls();
  checkComponentLogs();
  forceReRender();
  checkRecentStateChanges();
  
  console.log('\nüéØ RESUMEN DE DEPURACI√ìN:');
  console.log('1. Revisa la consola durante los pr√≥ximos 10 segundos');
  console.log('2. Observa si aparecen logs de polling cada 3 segundos');
  console.log('3. Verifica en Network si hay llamadas API');
  console.log('4. Si no ves actividad, el polling podr√≠a estar detenido');
  
  // Programar una verificaci√≥n en 10 segundos
  setTimeout(() => {
    console.log('\n‚è∞ VERIFICACI√ìN DESPU√âS DE 10 SEGUNDOS:');
    console.log('¬øViste alg√∫n log de polling en los √∫ltimos 10 segundos?');
    console.log('Si NO: El polling no est√° funcionando');
    console.log('Si S√ç: El polling funciona, revisar por qu√© no actualiza el estado');
  }, 10000);
};

// Ejecutar autom√°ticamente al cargar el script
runAllChecks();

// Exportar funciones para uso manual
window.debugVerificacion = {
  checkPolling: checkPollingIntervals,
  checkState: checkCierreState,
  checkNetwork: checkNetworkCalls,
  checkLogs: checkComponentLogs,
  forceReRender: forceReRender,
  runAll: runAllChecks
};

console.log('\nüõ†Ô∏è FUNCIONES DISPONIBLES:');
console.log('‚Ä¢ debugVerificacion.checkPolling() - Verificar polling');
console.log('‚Ä¢ debugVerificacion.checkState() - Verificar estado');
console.log('‚Ä¢ debugVerificacion.checkNetwork() - Monitor API');
console.log('‚Ä¢ debugVerificacion.runAll() - Ejecutar todo');
