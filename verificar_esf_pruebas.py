#!/usr/bin/env python3
"""
Script para verificar que el ESF se está guardando en carpeta de pruebas
====================================================================

Ejecutar después de una finalización para ver si el ESF se guardó automáticamente.
"""

import os
import sys
import django

# Configurar Django
sys.path.append('/root/SGM/backend')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

from contabilidad.cache_redis import get_cache_system

def verificar_esf_en_pruebas():
    """Verificar si hay ESF en la carpeta de pruebas"""
    
    print("🔍 VERIFICANDO ESF EN CARPETA DE PRUEBAS")
    print("=" * 50)
    
    cache_system = get_cache_system()
    
    # Cliente y período de ejemplo
    cliente_id = 1
    periodo = "2025-07"
    
    print(f"Buscando ESF de prueba para Cliente {cliente_id}, Período {periodo}...")
    
    # Buscar ESF de finalización automática
    esf_auto = cache_system.get_prueba_esf(cliente_id, periodo, "finalizacion_automatica")
    
    if esf_auto:
        print(f"✅ ESF de finalización automática encontrado!")
        print(f"   Source: {esf_auto.get('source', 'N/A')}")
        print(f"   Generated by: {esf_auto.get('generated_by', 'N/A')}")
        print(f"   Generated at: {esf_auto.get('generated_at', 'N/A')}")
        print(f"   Total Activos: ${esf_auto.get('total_activos', 0):,.2f}")
        print(f"   Total Pasivos: ${esf_auto.get('liabilities', {}).get('total_liabilities', 0):,.2f}")
        print(f"   Total Patrimonio: ${esf_auto.get('patrimony', {}).get('total_patrimony', 0):,.2f}")
        print(f"   Balance Cuadrado: {'✅ SÍ' if esf_auto.get('balance_cuadrado', False) else '❌ NO'}")
        
        # Mostrar metadata
        metadata = esf_auto.get('metadata_prueba', {})
        if metadata:
            print(f"   📊 Metadata:")
            print(f"      Cuentas procesadas: {metadata.get('total_cuentas_procesadas', 0)}")
            print(f"      Versión sistema: {metadata.get('version_sistema', 'N/A')}")
            print(f"      Diferencia balance: ${metadata.get('diferencia_balance', 0):,.2f}")
    else:
        print(f"❌ No se encontró ESF de finalización automática")
        print(f"   Esto puede significar que:")
        print(f"   1. No se ha ejecutado una finalización reciente")
        print(f"   2. Hubo un error en el guardado")
        print(f"   3. Los datos están en otro cliente/período")
    
    # Listar todas las pruebas disponibles
    print(f"\n📋 TODAS LAS PRUEBAS DISPONIBLES:")
    print("-" * 50)
    
    pruebas = cache_system.list_pruebas_cliente(cliente_id, periodo)
    
    if pruebas:
        for i, prueba in enumerate(pruebas, 1):
            print(f"{i}. Tipo: {prueba['data_type']}")
            print(f"   Test: {prueba['test_type']}")
            print(f"   Cliente: {prueba['cliente_id']}")
            print(f"   Período: {prueba['periodo']}")
            print(f"   Key: {prueba['redis_key']}")
            print(f"   ───────────────────────")
    else:
        print(f"❌ No hay pruebas disponibles para Cliente {cliente_id}, Período {periodo}")
    
    # Estadísticas generales
    print(f"\n📈 ESTADÍSTICAS DE CACHE:")
    print("-" * 50)
    
    stats = cache_system.get_cache_stats()
    print(f"Pruebas guardadas: {stats.get('pruebas_cached', 0)}")
    print(f"Pruebas recuperadas: {stats.get('pruebas_retrieved', 0)}")
    print(f"ESF de prueba guardados: {stats.get('pruebas_esf_cached', 0)}")
    print(f"Total claves de prueba: {stats.get('pruebas_keys', 0)}")

if __name__ == "__main__":
    try:
        verificar_esf_en_pruebas()
    except Exception as e:
        print(f"❌ Error: {e}")
        import traceback
        traceback.print_exc()
