"""
Django settings for sgm_backend project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from django.core.cache import cache
from django.core.exceptions import ImproperlyConfigured
import os

# Redis y Celery Configuration
REDIS_PASSWORD = os.environ.get('REDIS_PASSWORD', '')
if REDIS_PASSWORD:
    REDIS_URL = f"redis://:{REDIS_PASSWORD}@redis:6379/0"
    CACHE_REDIS_URL = f"redis://:{REDIS_PASSWORD}@redis:6379/1"
else:
    REDIS_URL = "redis://redis:6379/0"
    CACHE_REDIS_URL = "redis://redis:6379/1"

CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Ajustes para guardar archivos multimedia
# MEDIA_URL es la URL pública para acceder a los archivos multimedia
# MEDIA_ROOT es la ruta en el sistema de archivos donde se guardan los archivos multimedia
MEDIA_ROOT = BASE_DIR / "media"
MEDIA_URL = "/media/"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")
if not SECRET_KEY:
    raise ImproperlyConfigured("SECRET_KEY environment variable is required")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "False").lower() in {"1", "true", "yes", "y"}

ALLOWED_HOSTS = ['172.17.11.18', '127.0.0.1', 'localhost', '0.0.0.0']


# Application definition
AUTH_USER_MODEL = 'api.Usuario'

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',  # Para usar características avanzadas de PostgreSQL
    'django_extensions',  # Para usar características avanzadas de Django
    'rest_framework',
    'api',
    'contabilidad',
    'nomina',
    'task_manager',  # ← Nueva app para manejo global de tareas
    'corsheaders',
]

REST_FRAMEWORK = {
  'DEFAULT_AUTHENTICATION_CLASSES': (
    'rest_framework_simplejwt.authentication.JWTAuthentication',
  ),
  'DEFAULT_PERMISSION_CLASSES': (
    'rest_framework.permissions.IsAuthenticated',
  ),
  "DATETIME_FORMAT": None,  # None = ISO 8601
  "DATE_FORMAT": None,
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:5174",  # si estás en local
    "http://172.17.11.18:5174",  # tu IP real desde Vite
    "http://172.17.11.18:8000",  # tu IP real desde Vite
]

# URL handling
APPEND_SLASH = True

ROOT_URLCONF = 'sgm_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sgm_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB', 'sgm_db'),
        'USER': os.environ.get('POSTGRES_USER', 'sgm_user'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'sgm_pass'),
        'HOST': os.environ.get('POSTGRES_HOST', 'db'),
        'PORT': os.environ.get('POSTGRES_PORT', '5432'),
    }
}

# Cache con Redis (usa memoria local si django_redis no está disponible)
try:
    import django_redis  # noqa: F401
    _cache_backend = "django_redis.cache.RedisCache"
    _cache_opts = {"CLIENT_CLASS": "django_redis.client.DefaultClient"}
except ModuleNotFoundError:
    _cache_backend = "django.core.cache.backends.locmem.LocMemCache"
    _cache_opts = {}

CACHES = {
    "default": {
        "BACKEND": _cache_backend,
        "LOCATION": CACHE_REDIS_URL,  # ← Cambiar esta línea
        "OPTIONS": {
            **_cache_opts,
            "CONNECTION_POOL_KWARGS": {
                "max_connections": 20,
                "retry_on_timeout": True,
            },
            "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor",
            "IGNORE_EXCEPTIONS": True,  # No fallar si Redis está down
        },
        "KEY_PREFIX": "sgm_backend",
        "VERSION": 1,
        "TIMEOUT": 300,  # 5 minutos por defecto
    }
}

_cache_opts = {
    "CLIENT_CLASS": "django_redis.client.DefaultClient",
    "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
}

CACHES["default"]["KEY_PREFIX"] = "sgm_backend"

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Para desarrollo, también agrega:
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),
}

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '[{levelname}] {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        '': {  # Root logger
            'handlers': ['console'],
            'level': 'DEBUG',
        },
        'contabilidad': {  # Logger for tu app
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django_redis': {     # Logger para cache con redis
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}
