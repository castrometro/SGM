# Generated by hand to enforce FK-only AccountClassification

from django.db import migrations, models
import django.db.models.deletion


def migrate_accountclassification_fk(apps, schema_editor):
    """
    Migra registros de AccountClassification con cuenta NULL usando cuenta_codigo.
    - Si encuentra la CuentaContable por (cliente, codigo), la asigna.
    - Si no existe, elimina el registro inválido.
    """
    AC = apps.get_model('contabilidad', 'AccountClassification')
    Cuenta = apps.get_model('contabilidad', 'CuentaContable')
    db_alias = schema_editor.connection.alias

    # Filtrar sólo casos con cuenta nula
    qs = AC.objects.using(db_alias).filter(cuenta__isnull=True)

    for ac in qs.iterator():
        # cuenta_codigo existía en migraciones previas; si no está, getattr devolverá None
        code = getattr(ac, 'cuenta_codigo', None)
        cliente_id = getattr(ac, 'cliente_id', None)

        if code and cliente_id:
            try:
                cuenta = Cuenta.objects.using(db_alias).get(cliente_id=cliente_id, codigo=code)
                ac.cuenta_id = cuenta.id
                # Asegurar coherencia de cliente
                ac.cliente_id = cuenta.cliente_id
                ac.save(update_fields=['cuenta', 'cliente'])
                continue
            except Cuenta.DoesNotExist:
                pass

        # Si no se pudo mapear, eliminar el registro inválido
        ac.delete()


def noop_reverse(apps, schema_editor):
    # No revertimos asignaciones ni eliminaciones
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('contabilidad', '0051_alter_tarjetaactivitylog_tarjeta'),
    ]

    operations = [
        # 1) Migración de datos: resolver cuenta nula desde cuenta_codigo o eliminar
        migrations.RunPython(migrate_accountclassification_fk, noop_reverse),

        # 2) Limpiar constraints antiguos relacionados a cuenta_codigo / condicionales
        migrations.RemoveConstraint(
            model_name='accountclassification',
            name='unique_cliente_codigo_set_when_cuenta_null',
        ),
        migrations.RemoveConstraint(
            model_name='accountclassification',
            name='unique_cuenta_set_when_cuenta_exists',
        ),
        migrations.RemoveConstraint(
            model_name='accountclassification',
            name='cuenta_or_codigo_required',
        ),

        # 3) Eliminar campo temporal cuenta_codigo
        migrations.RemoveField(
            model_name='accountclassification',
            name='cuenta_codigo',
        ),

        # 4) Forzar FK obligatoria (null=False)
        migrations.AlterField(
            model_name='accountclassification',
            name='cuenta',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='clasificaciones',
                to='contabilidad.cuentacontable',
                help_text='Cuenta a la que pertenece esta clasificación (obligatoria)'
            ),
        ),

        # 5) Agregar constraint definitivo único por (cuenta, set)
        migrations.AddConstraint(
            model_name='accountclassification',
            constraint=models.UniqueConstraint(
                fields=['cuenta', 'set_clas'],
                name='unique_cuenta_set',
            ),
        ),
    ]
