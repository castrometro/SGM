#!/usr/bin/env python3
"""
Test de validaci√≥n de RUT NaN para archivos de Novedades

Este script prueba que la nueva validaci√≥n aplicada a NovedadesRemuneraciones.py
funcione correctamente para evitar procesar filas con RUT inv√°lido que Talana
coloca como totales al final de los archivos.

PROBLEMA IDENTIFICADO:
- Usuario report√≥ discrepancia: "Empleado nan nan nan (RUT: nan) solo en Novedades"  
- Causa: Archivo novedades tiene filas de totales con RUT NaN al igual que el Libro Mayor
- Soluci√≥n: Aplicar misma validaci√≥n _es_rut_valido() que se implement√≥ para LibroRemuneraciones.py
"""

import pandas as pd
import numpy as np
import sys
import os
import django

# Configurar Django
sys.path.append('/root/SGM')
os.chdir('/root/SGM')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

# Importar funciones a testear
from backend.nomina.utils.LibroRemuneraciones import _es_rut_valido
from backend.nomina.utils.NovedadesRemuneraciones import (
    actualizar_empleados_desde_novedades,
    guardar_registros_novedades
)

def crear_dataframe_novedades_simulado():
    """Crea un DataFrame simulando archivo de novedades con filas problem√°ticas"""
    
    print("üìÅ CREANDO DATAFRAME SIMULADO DE NOVEDADES")
    print("="*60)
    
    # Simular estructura t√≠pica de archivo novedades
    data = {
        # Primeras 4 columnas: datos del empleado
        'RUT': ['12345678-9', '98765432-1', np.nan, 'TOTAL', '11223344-5', 'SUMA'],
        'Nombre': ['Juan', 'Mar√≠a', 'TOTALES', 'GENERAL', 'Carlos', 'FINAL'],
        'Apellido Paterno': ['P√©rez', 'Gonz√°lez', '', '', 'Silva', ''],
        'Apellido Materno': ['L√≥pez', 'Mart√≠nez', '', '', 'Rojas', ''],
        # Columnas 5+: conceptos de novedades
        'Gratificaci√≥n Legal': [50000, 60000, 110000, 110000, 45000, 265000],
        'Bono Responsabilidad': [25000, 30000, 55000, 55000, 20000, 130000],
        'Descuento Atraso': [-5000, 0, -5000, -5000, -2000, -12000]
    }
    
    df = pd.DataFrame(data)
    
    print("DataFrame de novedades simulado:")
    print(df)
    print()
    
    # Identificar filas que deber√≠an ser ignoradas
    filas_validas = []
    filas_invalidas = []
    
    for index, row in df.iterrows():
        rut_raw = row['RUT']
        es_valido = _es_rut_valido(rut_raw)
        
        if es_valido:
            filas_validas.append(index)
        else:
            filas_invalidas.append(index)
    
    print(f"An√°lisis de validaci√≥n:")
    print(f"  - Filas V√ÅLIDAS (procesar): {filas_validas}")
    print(f"  - Filas INV√ÅLIDAS (ignorar): {filas_invalidas}")
    print()
    
    return df, filas_validas, filas_invalidas

def simular_procesamiento_novedades(df):
    """Simula c√≥mo se procesar√≠an las filas del DataFrame"""
    
    print("üîÑ SIMULANDO PROCESAMIENTO DE NOVEDADES")
    print("="*60)
    
    # Simular la l√≥gica que hay en actualizar_empleados_desde_novedades
    rut_col = df.columns[0]  # Primera columna (RUT)
    
    empleados_procesados = []
    filas_ignoradas = 0
    
    for index, row in df.iterrows():
        # Verificar si la primera columna est√° vac√≠a
        primera_col_valor = str(row.get(df.columns[0], "")).strip()
        if not primera_col_valor:
            print(f"Fila {index}: Ignorada por primera columna vac√≠a")
            continue
        
        # Aplicar validaci√≥n de RUT
        rut_raw = row.get(rut_col)
        if not _es_rut_valido(rut_raw):
            filas_ignoradas += 1
            print(f"Fila {index}: ‚ùå IGNORADA - RUT inv√°lido '{rut_raw}' (posible total de Talana)")
            continue
        
        # Procesar como empleado v√°lido
        rut = str(rut_raw).strip()
        nombre_completo = f"{row.get('Nombre', '')} {row.get('Apellido Paterno', '')} {row.get('Apellido Materno', '')}"
        empleados_procesados.append({
            'fila': index,
            'rut': rut,
            'nombre_completo': nombre_completo.strip()
        })
        print(f"Fila {index}: ‚úÖ PROCESADA - {nombre_completo.strip()} (RUT: {rut})")
    
    print("="*60)
    print(f"RESULTADO SIMULACI√ìN:")
    print(f"  - Empleados procesados: {len(empleados_procesados)}")
    print(f"  - Filas ignoradas: {filas_ignoradas}")
    print(f"  - Total filas: {len(df)}")
    
    return empleados_procesados, filas_ignoradas

def main():
    """Ejecutar simulaci√≥n completa"""
    print("üß™ PRUEBA DE VALIDACI√ìN RUT NaN - ARCHIVOS DE NOVEDADES")
    print("="*60)
    print("CONTEXTO: Usuario report√≥ discrepancia 'Empleado nan nan nan (RUT: nan) solo en Novedades'")
    print("CAUSA: Talana coloca filas de totales con RUT NaN al final de archivos de novedades")
    print("SOLUCI√ìN: Aplicar validaci√≥n _es_rut_valido() como en LibroRemuneraciones.py")
    print("="*60)
    print()
    
    # 1. Crear DataFrame simulado
    df, filas_validas_esperadas, filas_invalidas_esperadas = crear_dataframe_novedades_simulado()
    
    # 2. Simular procesamiento
    empleados_procesados, filas_ignoradas = simular_procesamiento_novedades(df)
    
    # 3. Validar resultados
    print()
    print("üîç VALIDACI√ìN DE RESULTADOS")
    print("="*60)
    
    # Verificar que se procesaron solo las filas v√°lidas esperadas
    filas_procesadas = [emp['fila'] for emp in empleados_procesados]
    
    if set(filas_procesadas) == set(filas_validas_esperadas):
        print("‚úÖ CORRECTO: Solo se procesaron las filas con RUT v√°lido")
    else:
        print("‚ùå ERROR: Se procesaron filas incorrectas")
        print(f"   Esperado: {filas_validas_esperadas}")
        print(f"   Procesado: {filas_procesadas}")
    
    # Verificar que se ignoraron las filas correctas
    if filas_ignoradas == len(filas_invalidas_esperadas):
        print("‚úÖ CORRECTO: Se ignoraron las filas con RUT inv√°lido")
    else:
        print("‚ùå ERROR: No se ignoraron las filas correctas")
        print(f"   Esperado ignorar: {len(filas_invalidas_esperadas)}")
        print(f"   Realmente ignoradas: {filas_ignoradas}")
    
    # Verificar que no aparecer√°n empleados "nan nan nan" en discrepancias
    empleados_con_nan = [emp for emp in empleados_procesados if 'nan' in emp['rut'].lower() or 'nan' in emp['nombre_completo'].lower()]
    
    if len(empleados_con_nan) == 0:
        print("‚úÖ CORRECTO: No se procesaron empleados con RUT/nombre 'nan'")
        print("   ‚Üí Esto evitar√° la discrepancia 'Empleado nan nan nan (RUT: nan) solo en Novedades'")
    else:
        print("‚ùå ERROR: Se procesaron empleados con 'nan':")
        for emp in empleados_con_nan:
            print(f"   - {emp}")
    
    print()
    print("üéØ CONCLUSI√ìN")
    print("="*60)
    
    if len(empleados_con_nan) == 0 and filas_ignoradas == len(filas_invalidas_esperadas):
        print("üéâ ¬°√âXITO! La validaci√≥n funciona correctamente:")
        print("   ‚úÖ Se ignoran filas con RUT NaN/total de Talana")
        print("   ‚úÖ No se crean empleados 'nan nan nan' en novedades")
        print("   ‚úÖ Se elimina la discrepancia reportada por el usuario")
        print("   ‚úÖ Solo se procesan empleados reales con RUT v√°lido")
        return True
    else:
        print("‚ùå HAY PROBLEMAS en la validaci√≥n. Revisar implementaci√≥n.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
