#!/usr/bin/env python3
"""
Script de monitoreo para analizar el rendimiento de Celery Chord en consolidaci√≥n
"""
import os
import sys
import django
from datetime import datetime, timedelta

# Configurar Django
sys.path.append('/root/SGM/backend')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

from celery import Celery
from nomina.models import CierreNomina

def monitorear_consolidacion():
    """Monitorea el rendimiento de la consolidaci√≥n con Chord"""
    
    print("üîç Monitor de Rendimiento - Consolidaci√≥n con Celery Chord")
    print("=" * 60)
    
    # Obtener estad√≠sticas de cierres recientes
    cierres_recientes = CierreNomina.objects.filter(
        fecha_creacion__gte=datetime.now() - timedelta(days=1)
    ).order_by('-fecha_creacion')[:5]
    
    if not cierres_recientes:
        print("‚ùå No se encontraron cierres recientes para analizar")
        return
    
    print(f"üìä Analizando {len(cierres_recientes)} cierres recientes:")
    print()
    
    for cierre in cierres_recientes:
        print(f"üè¢ {cierre.cliente.razon_social} - {cierre.periodo}")
        print(f"   üìÖ Creado: {cierre.fecha_creacion.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"   üìä Estado: {cierre.estado}")
        
        # Estad√≠sticas de consolidaci√≥n
        empleados_count = cierre.nominas_consolidadas.count() if hasattr(cierre, 'nominas_consolidadas') else 0
        movimientos_count = cierre.movimientos_personal.count() if hasattr(cierre, 'movimientos_personal') else 0
        
        print(f"   üë• Empleados consolidados: {empleados_count}")
        print(f"   üîÑ Movimientos detectados: {movimientos_count}")
        
        # Calcular eficiencia aproximada
        if empleados_count > 0:
            if empleados_count < 50:
                rendimiento = "üü¢ Excelente (< 50 empleados)"
            elif empleados_count < 150:
                rendimiento = "üü° Bueno (50-150 empleados)"
            else:
                rendimiento = "üî¥ Moderado (> 150 empleados)"
            
            print(f"   ‚ö° Rendimiento esperado: {rendimiento}")
        
        print("-" * 40)
        print()
    
    print("üí° Recomendaciones de Optimizaci√≥n:")
    print("   ‚Ä¢ Para > 200 empleados: Considerar chunks m√°s peque√±os")
    print("   ‚Ä¢ Para > 500 empleados: Implementar procesamiento por lotes")
    print("   ‚Ä¢ Para > 1000 empleados: Usar queue dedicada para consolidaci√≥n")
    print()
    
    # Verificar configuraci√≥n de Celery
    print("üîß Configuraci√≥n Celery recomendada:")
    print("   ‚Ä¢ Workers: 4-8 procesos paralelos")
    print("   ‚Ä¢ Concurrency: 2-4 por worker")
    print("   ‚Ä¢ Queue: Dedicada para consolidaci√≥n")
    print("   ‚Ä¢ Timeout: 300s para tareas largas")

def sugerir_optimizaciones():
    """Sugiere optimizaciones basadas en el uso actual"""
    
    print("\nüöÄ Optimizaciones Adicionales Disponibles:")
    print("=" * 50)
    
    optimizaciones = [
        {
            "titulo": "1. Chunk Size Din√°mico",
            "descripcion": "Ajustar tama√±o de lotes seg√∫n n√∫mero de empleados",
            "beneficio": "Optimizaci√≥n autom√°tica del rendimiento"
        },
        {
            "titulo": "2. Cache de Conceptos",
            "descripcion": "Cachear clasificaciones de conceptos frecuentes",
            "beneficio": "Reducir consultas DB en ~40%"
        },
        {
            "titulo": "3. Bulk Operations",
            "descripcion": "Usar bulk_create para inserciones masivas",
            "beneficio": "Acelerar escritura DB en ~60%"
        },
        {
            "titulo": "4. Queue Prioritizada",
            "descripcion": "Queue dedicada con alta prioridad para consolidaci√≥n",
            "beneficio": "Garantizar recursos para consolidaci√≥n"
        },
        {
            "titulo": "5. Monitoreo Real-time",
            "descripcion": "WebSocket para tracking de progreso",
            "beneficio": "Mejor UX durante consolidaci√≥n"
        }
    ]
    
    for opt in optimizaciones:
        print(f"üîπ {opt['titulo']}")
        print(f"   üìã {opt['descripcion']}")
        print(f"   ‚úÖ Beneficio: {opt['beneficio']}")
        print()

if __name__ == "__main__":
    try:
        monitorear_consolidacion()
        sugerir_optimizaciones()
    except Exception as e:
        print(f"‚ùå Error en monitoreo: {e}")
        sys.exit(1)
