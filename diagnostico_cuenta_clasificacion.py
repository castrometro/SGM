#!/usr/bin/env python3
"""
Script de diagn√≥stico para investigar por qu√© una cuenta aparece como no clasificada
cuando aparentemente s√≠ lo est√°.
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
sys.path.append('/root/SGM/backend')
django.setup()

from contabilidad.models import (
    CuentaContable, ClasificacionSet, AccountClassification, 
    CierreContabilidad, ExcepcionClasificacionSet
)
from api.models import Cliente

def diagnosticar_cuenta_clasificacion(cliente_nombre, codigo_cuenta, set_nombre):
    """
    Diagnostica por qu√© una cuenta aparece como no clasificada
    """
    print(f"\n{'='*60}")
    print(f"üîç DIAGN√ìSTICO PARA CUENTA: {codigo_cuenta}")
    print(f"üìä SET: {set_nombre}")
    print(f"üè¢ CLIENTE: {cliente_nombre}")
    print(f"{'='*60}\n")
    
    try:
        # 1. Verificar que el cliente existe
        cliente = Cliente.objects.filter(nombre__icontains=cliente_nombre).first()
        if not cliente:
            print(f"‚ùå ERROR: Cliente '{cliente_nombre}' no encontrado")
            clientes = Cliente.objects.all()[:5]
            print("üìù Clientes disponibles:")
            for c in clientes:
                print(f"   - {c.nombre}")
            return
        
        print(f"‚úÖ Cliente encontrado: {cliente.nombre} (ID: {cliente.id})")
        
        # 2. Verificar que la cuenta existe
        cuenta = CuentaContable.objects.filter(
            cliente=cliente,
            codigo=codigo_cuenta
        ).first()
        
        if not cuenta:
            print(f"‚ùå ERROR: Cuenta '{codigo_cuenta}' no encontrada para cliente {cliente.nombre}")
            cuentas_similares = CuentaContable.objects.filter(
                cliente=cliente,
                codigo__startswith=codigo_cuenta[:5]
            )[:5]
            print("üìù Cuentas similares:")
            for c in cuentas_similares:
                print(f"   - {c.codigo}: {c.nombre}")
            return
        
        print(f"‚úÖ Cuenta encontrada: {cuenta.codigo} - {cuenta.nombre}")
        
        # 3. Verificar que el set de clasificaci√≥n existe
        set_clasificacion = ClasificacionSet.objects.filter(
            cliente=cliente,
            nombre__icontains=set_nombre
        ).first()
        
        if not set_clasificacion:
            print(f"‚ùå ERROR: Set '{set_nombre}' no encontrado para cliente {cliente.nombre}")
            sets_disponibles = ClasificacionSet.objects.filter(cliente=cliente)
            print("üìù Sets disponibles:")
            for s in sets_disponibles:
                print(f"   - {s.nombre} (ID: {s.id})")
            return
        
        print(f"‚úÖ Set encontrado: {set_clasificacion.nombre} (ID: {set_clasificacion.id})")
        
        # 4. Verificar si existe la clasificaci√≥n
        clasificacion = AccountClassification.objects.filter(
            cuenta=cuenta,
            set_clas=set_clasificacion
        ).first()
        
        if clasificacion:
            print(f"‚úÖ CLASIFICACI√ìN ENCONTRADA:")
            print(f"   - Opci√≥n: {clasificacion.opcion.valor}")
            print(f"   - Descripci√≥n: {clasificacion.opcion.descripcion}")
            print(f"   - Fecha creaci√≥n: {clasificacion.fecha_creacion}")
        else:
            print(f"‚ùå NO SE ENCONTR√ì CLASIFICACI√ìN para esta cuenta en este set")
            
            # Verificar si hay clasificaciones en otros sets
            otras_clasificaciones = AccountClassification.objects.filter(cuenta=cuenta)
            if otras_clasificaciones:
                print("üìù Clasificaciones en otros sets:")
                for c in otras_clasificaciones:
                    print(f"   - Set: {c.set_clas.nombre} | Opci√≥n: {c.opcion.valor}")
            else:
                print("üìù Esta cuenta NO tiene clasificaciones en ning√∫n set")
        
        # 5. Verificar excepciones
        excepcion = ExcepcionClasificacionSet.objects.filter(
            cliente=cliente,
            cuenta_codigo=codigo_cuenta,
            set_clasificacion=set_clasificacion,
            activa=True
        ).first()
        
        if excepcion:
            print(f"‚ö†Ô∏è  EXCEPCI√ìN ACTIVA:")
            print(f"   - Motivo: {excepcion.motivo}")
            print(f"   - Fecha: {excepcion.fecha_creacion}")
            print(f"   - Usuario: {excepcion.usuario_creador}")
        else:
            print(f"‚úÖ No hay excepciones activas para esta cuenta en este set")
        
        # 6. Verificar todas las clasificaciones de la cuenta
        print(f"\nüìä RESUMEN COMPLETO DE CLASIFICACIONES:")
        todas_clasificaciones = AccountClassification.objects.filter(cuenta=cuenta)
        if todas_clasificaciones:
            for c in todas_clasificaciones:
                print(f"   ‚úì Set: {c.set_clas.nombre} ‚Üí {c.opcion.valor}")
        else:
            print(f"   ‚ùå Esta cuenta NO tiene ninguna clasificaci√≥n")
        
        # 7. Verificar todas las excepciones de la cuenta
        print(f"\n‚ö†Ô∏è  EXCEPCIONES ACTIVAS:")
        excepciones = ExcepcionClasificacionSet.objects.filter(
            cliente=cliente,
            cuenta_codigo=codigo_cuenta,
            activa=True
        )
        if excepciones:
            for exc in excepciones:
                print(f"   - Set: {exc.set_clasificacion.nombre} | Motivo: {exc.motivo}")
        else:
            print(f"   ‚úÖ No hay excepciones activas para esta cuenta")
        
        # 8. Diagn√≥stico final
        print(f"\nüéØ DIAGN√ìSTICO FINAL:")
        if clasificacion and not excepcion:
            print(f"   ‚úÖ La cuenta EST√Å correctamente clasificada")
            print(f"   ü§î Si aparece como incidencia, puede ser:")
            print(f"      - Cache no actualizado")
            print(f"      - Diferencia en c√≥digos de cuenta (espacios, may√∫sculas)")
            print(f"      - Problema en la l√≥gica de validaci√≥n")
        elif excepcion:
            print(f"   ‚ö†Ô∏è  La cuenta tiene excepci√≥n activa - NO deber√≠a aparecer como incidencia")
        else:
            print(f"   ‚ùå La cuenta NO est√° clasificada en este set")
        
    except Exception as e:
        print(f"üí• ERROR en diagn√≥stico: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    # Usar los datos del problema reportado
    diagnosticar_cuenta_clasificacion(
        cliente_nombre="",  # Agregar nombre del cliente aqu√≠
        codigo_cuenta="1-02-003-001-0001",
        set_nombre="estado de situacion financiera"
    )
