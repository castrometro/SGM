"""
üéØ PROPUESTA: MODELO SIMPLIFICADO DE INCIDENCIAS
Solo para comparaci√≥n de totales por concepto (sin empleados individuales)

Este modelo reemplazar√≠a al actual IncidenciaCierre para el nuevo sistema
enfocado √∫nicamente en variaciones de totales por √≠tem entre per√≠odos.
"""

from django.db import models
from django.contrib.auth import get_user_model
from django.utils import timezone
from datetime import datetime

User = get_user_model()

class TipoIncidenciaSimplificado(models.TextChoices):
    """Tipos de incidencia simplificados - solo totales por concepto"""
    # √önicamente variaciones de conceptos (agregados)
    VARIACION_TOTAL_CONCEPTO = 'variacion_total_concepto', 'Variaci√≥n en Total de Concepto (‚â•30%)'
    CONCEPTO_NUEVO_PERIODO = 'concepto_nuevo_periodo', 'Concepto Nuevo en Per√≠odo'
    CONCEPTO_ELIMINADO_PERIODO = 'concepto_eliminado_periodo', 'Concepto Eliminado del Per√≠odo'

class EstadoIncidenciaSimplificado(models.TextChoices):
    """Estados de resoluci√≥n simplificados"""
    PENDIENTE = 'pendiente', 'Pendiente de An√°lisis'
    JUSTIFICADA = 'justificada', 'Justificada por Analista'
    APROBADA = 'aprobada', 'Aprobada por Supervisor'
    RECHAZADA = 'rechazada', 'Rechazada por Supervisor'

class PrioridadIncidencia(models.TextChoices):
    """Prioridad basada en impacto monetario y porcentaje de variaci√≥n"""
    BAJA = 'baja', 'Baja'
    MEDIA = 'media', 'Media'
    ALTA = 'alta', 'Alta'
    CRITICA = 'critica', 'Cr√≠tica'

class IncidenciaCierreSimplificada(models.Model):
    """
    üéØ MODELO SIMPLIFICADO DE INCIDENCIAS - SOLO TOTALES POR CONCEPTO
    
    Enfoque: Comparaci√≥n per√≠odo actual vs anterior √∫nicamente a nivel de totales
    por concepto (suma de todos los empleados por cada concepto).
    
    Sin empleados individuales, sin RUTs, sin comparaciones elemento a elemento.
    """
    
    # === RELACI√ìN B√ÅSICA ===
    cierre = models.ForeignKey('CierreNomina', on_delete=models.CASCADE, related_name='incidencias_simplificadas')
    
    # === TIPO Y CLASIFICACI√ìN ===
    tipo_incidencia = models.CharField(
        max_length=40, 
        choices=TipoIncidenciaSimplificado.choices,
        help_text="Tipo de incidencia detectada"
    )
    
    # === CONCEPTO AFECTADO ===
    concepto_afectado = models.CharField(
        max_length=200, 
        db_index=True,
        help_text="Nombre del concepto que presenta la incidencia"
    )
    
    clasificacion_concepto = models.CharField(
        max_length=30,
        null=True,
        blank=True,
        help_text="Clasificaci√≥n del concepto (haberes_imponibles, descuentos_legales, etc.)"
    )
    
    # === DATOS DE VARIACI√ìN ===
    monto_actual = models.DecimalField(
        max_digits=15, 
        decimal_places=2,
        help_text="Total del concepto en el per√≠odo actual"
    )
    
    monto_anterior = models.DecimalField(
        max_digits=15, 
        decimal_places=2,
        help_text="Total del concepto en el per√≠odo anterior"
    )
    
    delta_absoluto = models.DecimalField(
        max_digits=15, 
        decimal_places=2,
        help_text="Diferencia absoluta (actual - anterior)"
    )
    
    delta_porcentual = models.DecimalField(
        max_digits=8, 
        decimal_places=4,
        help_text="Variaci√≥n porcentual ((actual - anterior) / anterior * 100)"
    )
    
    empleados_afectados = models.PositiveIntegerField(
        default=0,
        help_text="Cantidad de empleados que tienen este concepto en el per√≠odo actual"
    )
    
    # === METADATOS DE DETECCI√ìN ===
    descripcion = models.TextField(
        help_text="Descripci√≥n autom√°tica de la incidencia"
    )
    
    fecha_detectada = models.DateTimeField(
        auto_now_add=True,
        help_text="Cu√°ndo fue detectada la incidencia"
    )
    
    umbral_utilizado = models.DecimalField(
        max_digits=5,
        decimal_places=2,
        default=30.00,
        help_text="Umbral de variaci√≥n porcentual utilizado para detectar la incidencia"
    )
    
    # === RESOLUCI√ìN COLABORATIVA ===
    estado = models.CharField(
        max_length=20, 
        choices=EstadoIncidenciaSimplificado.choices, 
        default='pendiente'
    )
    
    prioridad = models.CharField(
        max_length=10, 
        choices=PrioridadIncidencia.choices, 
        default='media'
    )
    
    # === USUARIOS Y FECHAS DE RESOLUCI√ìN ===
    analista_asignado = models.ForeignKey(
        User, 
        on_delete=models.SET_NULL, 
        null=True, 
        blank=True, 
        related_name='incidencias_asignadas_simplificadas'
    )
    
    justificacion_analista = models.TextField(
        blank=True,
        help_text="Justificaci√≥n proporcionada por el analista"
    )
    
    fecha_justificacion = models.DateTimeField(
        null=True, 
        blank=True,
        help_text="Cu√°ndo el analista justific√≥ la incidencia"
    )
    
    supervisor_revisor = models.ForeignKey(
        User, 
        on_delete=models.SET_NULL, 
        null=True, 
        blank=True, 
        related_name='incidencias_supervisadas_simplificadas'
    )
    
    comentario_supervisor = models.TextField(
        blank=True,
        help_text="Comentario del supervisor (aprobaci√≥n/rechazo)"
    )
    
    fecha_resolucion_final = models.DateTimeField(
        null=True, 
        blank=True,
        help_text="Cu√°ndo el supervisor resolvi√≥ definitivamente la incidencia"
    )
    
    # === METADATOS ADICIONALES ===
    datos_contexto = models.JSONField(
        default=dict,
        help_text="Datos adicionales de contexto (desglose por empleados, etc.)"
    )
    
    # === VERSIONADO Y TRAZABILIDAD ===
    version_datos_cierre = models.PositiveIntegerField(
        default=1,
        help_text="Versi√≥n de los datos del cierre cuando se detect√≥"
    )
    
    hash_deteccion = models.CharField(
        max_length=64,
        null=True,
        blank=True,
        db_index=True,
        help_text="Hash √∫nico para evitar duplicados en re-detecciones"
    )
    
    class Meta:
        db_table = 'nomina_incidencia_simplificada'
        
        constraints = [
            # Evitar duplicados por concepto en el mismo cierre
            models.UniqueConstraint(
                fields=['cierre', 'concepto_afectado', 'tipo_incidencia'],
                name='unique_incidencia_por_concepto_cierre'
            ),
        ]
        
        indexes = [
            models.Index(fields=['cierre', 'estado']),
            models.Index(fields=['cierre', 'tipo_incidencia']),
            models.Index(fields=['estado', 'prioridad']),
            models.Index(fields=['concepto_afectado']),
            models.Index(fields=['fecha_detectada']),
            models.Index(fields=['analista_asignado', 'estado']),
            models.Index(fields=['supervisor_revisor', 'estado']),
            models.Index(fields=['hash_deteccion']),
        ]
        
        ordering = ['-fecha_detectada', '-delta_absoluto']
    
    def __str__(self):
        signo = '+' if self.delta_absoluto >= 0 else ''
        return f"{self.concepto_afectado}: {signo}{self.delta_porcentual:.1f}% (${self.delta_absoluto:,.0f})"
    
    def save(self, *args, **kwargs):
        """Auto-c√°lculo de campos derivados antes de guardar"""
        
        # Calcular prioridad autom√°ticamente
        if not self.prioridad or self.prioridad == 'media':
            self.prioridad = self.calcular_prioridad_automatica()
        
        # Generar descripci√≥n autom√°tica si no existe
        if not self.descripcion:
            self.descripcion = self.generar_descripcion_automatica()
        
        # Generar hash de detecci√≥n para evitar duplicados
        if not self.hash_deteccion:
            self.hash_deteccion = self.generar_hash_deteccion()
        
        super().save(*args, **kwargs)
    
    def calcular_prioridad_automatica(self):
        """Calcula prioridad basada en impacto monetario y porcentaje"""
        impacto_abs = abs(self.delta_absoluto)
        variacion_abs = abs(self.delta_porcentual)
        
        # Criterios de prioridad
        if impacto_abs >= 1000000 or variacion_abs >= 100:  # $1M+ o 100%+
            return 'critica'
        elif impacto_abs >= 500000 or variacion_abs >= 75:   # $500K+ o 75%+
            return 'alta'
        elif impacto_abs >= 100000 or variacion_abs >= 50:   # $100K+ o 50%+
            return 'media'
        else:
            return 'baja'
    
    def generar_descripcion_automatica(self):
        """Genera descripci√≥n legible de la incidencia"""
        if self.tipo_incidencia == TipoIncidenciaSimplificado.VARIACION_TOTAL_CONCEPTO:
            direccion = "aumento" if self.delta_absoluto > 0 else "disminuci√≥n"
            return (f"Variaci√≥n del {self.delta_porcentual:.1f}% en {self.concepto_afectado} "
                   f"({direccion} de ${abs(self.delta_absoluto):,.0f})")
        elif self.tipo_incidencia == TipoIncidenciaSimplificado.CONCEPTO_NUEVO_PERIODO:
            return f"Concepto nuevo '{self.concepto_afectado}' con total ${self.monto_actual:,.0f}"
        elif self.tipo_incidencia == TipoIncidenciaSimplificado.CONCEPTO_ELIMINADO_PERIODO:
            return f"Concepto '{self.concepto_afectado}' eliminado (antes ${self.monto_anterior:,.0f})"
        return f"Incidencia en {self.concepto_afectado}"
    
    def generar_hash_deteccion(self):
        """Genera hash √∫nico para esta detecci√≥n espec√≠fica"""
        import hashlib
        
        contenido = f"{self.cierre.id}|{self.concepto_afectado}|{self.tipo_incidencia}|{self.monto_actual}|{self.monto_anterior}"
        return hashlib.sha256(contenido.encode()).hexdigest()[:32]
    
    def puede_justificar(self, usuario):
        """Verifica si un usuario puede justificar esta incidencia"""
        return (
            self.estado == 'pendiente' and
            (not self.analista_asignado or self.analista_asignado == usuario) and
            hasattr(usuario, 'tipo_usuario') and usuario.tipo_usuario in ['analista', 'gerente']
        )
    
    def puede_aprobar_rechazar(self, usuario):
        """Verifica si un usuario puede aprobar/rechazar esta incidencia"""
        return (
            self.estado == 'justificada' and
            hasattr(usuario, 'tipo_usuario') and usuario.tipo_usuario in ['supervisor', 'gerente']
        )
    
    def justificar(self, usuario, justificacion):
        """Marca la incidencia como justificada por el analista"""
        if not self.puede_justificar(usuario):
            raise ValueError("Usuario no puede justificar esta incidencia")
        
        self.estado = 'justificada'
        self.analista_asignado = usuario
        self.justificacion_analista = justificacion
        self.fecha_justificacion = timezone.now()
        self.save(update_fields=['estado', 'analista_asignado', 'justificacion_analista', 'fecha_justificacion'])
    
    def aprobar(self, supervisor, comentario=""):
        """Aprueba la incidencia"""
        if not self.puede_aprobar_rechazar(supervisor):
            raise ValueError("Usuario no puede aprobar esta incidencia")
        
        self.estado = 'aprobada'
        self.supervisor_revisor = supervisor
        self.comentario_supervisor = comentario
        self.fecha_resolucion_final = timezone.now()
        self.save(update_fields=['estado', 'supervisor_revisor', 'comentario_supervisor', 'fecha_resolucion_final'])
    
    def rechazar(self, supervisor, comentario):
        """Rechaza la incidencia (vuelve a pendiente)"""
        if not self.puede_aprobar_rechazar(supervisor):
            raise ValueError("Usuario no puede rechazar esta incidencia")
        
        self.estado = 'rechazada'
        self.supervisor_revisor = supervisor
        self.comentario_supervisor = comentario
        self.fecha_resolucion_final = timezone.now()
        self.save(update_fields=['estado', 'supervisor_revisor', 'comentario_supervisor', 'fecha_resolucion_final'])
    
    @property
    def impacto_monetario(self):
        """Alias para compatibilidad - retorna valor absoluto del delta"""
        return abs(self.delta_absoluto)
    
    @property
    def es_variacion_positiva(self):
        """True si es un aumento, False si es disminuci√≥n"""
        return self.delta_absoluto > 0
    
    @property
    def es_incidencia_critica(self):
        """True si la incidencia es de prioridad cr√≠tica"""
        return self.prioridad == 'critica'


# =====================================
# VENTAJAS DEL MODELO SIMPLIFICADO:
# =====================================

"""
üéØ BENEFICIOS DE LA SIMPLIFICACI√ìN:

1. **CLARIDAD CONCEPTUAL**:
   - Solo maneja totales por concepto
   - Sin complejidad de empleados individuales
   - Enfoque √∫nico: variaciones per√≠odo vs per√≠odo

2. **PERFORMANCE MEJORADA**:
   - Menos registros (1 por concepto vs N por empleado)
   - Consultas m√°s r√°pidas
   - √çndices m√°s eficientes

3. **FLUJO DE TRABAJO SIMPLIFICADO**:
   - Un solo tipo de an√°lisis (totales)
   - Proceso de resoluci√≥n m√°s directo
   - Menos tipos de incidencia para manejar

4. **MANTENIMIENTO REDUCIDO**:
   - Menos c√≥digo para mantener
   - Menos casos edge
   - Migraci√≥n m√°s sencilla

5. **COMPATIBILIDAD CON REQUERIMIENTO ACTUAL**:
   - Se alinea perfectamente con la exclusi√≥n de informacion_adicional
   - Soporta el umbral del 30%
   - Mantiene la funcionalidad de justificaci√≥n/aprobaci√≥n

6. **ESCALABILIDAD**:
   - Puede manejar miles de conceptos eficientemente
   - Reporting agregado m√°s r√°pido
   - Menos carga en la BD

üîÑ MIGRACI√ìN SUGERIDA:
1. Crear nueva tabla con este modelo
2. Migrar datos existentes (solo suma_total)
3. Actualizar views para usar el nuevo modelo
4. Deprecar modelo anterior gradualmente
"""