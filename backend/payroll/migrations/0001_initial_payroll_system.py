# Generated by Django 5.2.1 on 2025-08-07 20:34

import django.db.models.deletion
import payroll.models.base
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('api', '0007_merge_20250717_2256'),
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PayrollClosure',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('status_changed_at', models.DateTimeField(auto_now_add=True)),
                ('status_history', models.JSONField(blank=True, default=list)),
                ('periodo', models.CharField(help_text='Período del cierre en formato YYYY-MM', max_length=7)),
                ('nombre', models.CharField(help_text='Nombre descriptivo del cierre', max_length=100)),
                ('descripcion', models.TextField(blank=True, help_text='Descripción adicional del cierre')),
                ('status', models.CharField(choices=[('CREATED', 'Creado'), ('UPLOADING_FILES', 'Subiendo Archivos'), ('VALIDATING', 'Validando Discrepancias'), ('CONSOLIDATING', 'Consolidando Datos'), ('COMPARING', 'Comparando con Período Anterior'), ('FINALIZING', 'Finalizando'), ('COMPLETED', 'Completado'), ('ERROR', 'Error'), ('CANCELLED', 'Cancelado')], default='CREATED', max_length=20)),
                ('fecha_inicio', models.DateTimeField(auto_now_add=True, help_text='Fecha de inicio del cierre')),
                ('fecha_limite', models.DateTimeField(blank=True, help_text='Fecha límite para completar el cierre', null=True)),
                ('fecha_completado', models.DateTimeField(blank=True, help_text='Fecha de finalización del cierre', null=True)),
                ('fase_actual', models.IntegerField(choices=[(1, 'Fase 1: Upload & Validation'), (2, 'Fase 2: Consolidation'), (3, 'Fase 3: Comparison'), (4, 'Fase 4: Finalization')], default=1, help_text='Fase actual del cierre')),
                ('total_empleados', models.IntegerField(default=0, help_text='Total de empleados en el cierre')),
                ('total_discrepancias', models.IntegerField(default=0, help_text='Total de discrepancias encontradas')),
                ('archivos_subidos', models.IntegerField(default=0, help_text='Cantidad de archivos subidos')),
                ('archivos_requeridos', models.IntegerField(default=6, help_text='Cantidad de archivos requeridos')),
                ('configuracion', models.JSONField(default=dict, help_text='Configuración específica del cierre')),
                ('redis_cache_key', models.CharField(blank=True, help_text='Key de Redis para cache del cierre', max_length=100)),
                ('analista_responsable', models.ForeignKey(help_text='Analista responsable del cierre', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cierres_responsable', to=settings.AUTH_USER_MODEL)),
                ('cliente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='api.cliente')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL)),
                ('status_changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_status_changes', to=settings.AUTH_USER_MODEL)),
                ('supervisor_asignado', models.ForeignKey(blank=True, help_text='Supervisor asignado para revisión', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cierres_supervisor', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Cierre de Nómina',
                'verbose_name_plural': 'Cierres de Nómina',
                'ordering': ['-fecha_inicio'],
            },
        ),
        migrations.CreateModel(
            name='PayrollActivityLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('activity_type', models.CharField(choices=[('FILE_UPLOAD', 'Subida de Archivo'), ('FILE_PARSING', 'Análisis de Archivo'), ('FILE_DELETE', 'Eliminación de Archivo'), ('FILE_REUPLOAD', 'Re-subida de Archivo'), ('VALIDATION_START', 'Inicio de Validación'), ('VALIDATION_COMPLETE', 'Validación Completada'), ('VALIDATION_FAILED', 'Validación Falló'), ('DISCREPANCY_FOUND', 'Discrepancia Encontrada'), ('DISCREPANCY_RESOLVED', 'Discrepancia Resuelta'), ('CLOSURE_CREATED', 'Cierre Creado'), ('STATUS_CHANGE', 'Cambio de Estado'), ('PHASE_ADVANCE', 'Avance de Fase'), ('CLOSURE_COMPLETED', 'Cierre Completado'), ('CLOSURE_CANCELLED', 'Cierre Cancelado'), ('CONSOLIDATION_START', 'Inicio de Consolidación'), ('CONSOLIDATION_COMPLETE', 'Consolidación Completada'), ('COMPARISON_START', 'Inicio de Comparación'), ('COMPARISON_COMPLETE', 'Comparación Completada'), ('REPORT_GENERATION', 'Generación de Reportes'), ('CLOSURE_FINALIZATION', 'Finalización de Cierre'), ('SYSTEM_ERROR', 'Error del Sistema'), ('DATA_EXPORT', 'Exportación de Datos'), ('DATA_IMPORT', 'Importación de Datos'), ('USER_LOGIN', 'Inicio de Sesión'), ('USER_LOGOUT', 'Cierre de Sesión')], max_length=30)),
                ('description', models.TextField(help_text='Descripción legible de la actividad')),
                ('details', models.JSONField(default=dict, help_text='Detalles adicionales de la actividad')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='Dirección IP del usuario', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent del navegador')),
                ('session_key', models.CharField(blank=True, help_text='Clave de sesión', max_length=40)),
                ('execution_time_ms', models.IntegerField(blank=True, help_text='Tiempo de ejecución en milisegundos', null=True)),
                ('is_successful', models.BooleanField(default=True, help_text='Si la actividad fue exitosa')),
                ('error_message', models.TextField(blank=True, help_text='Mensaje de error si la actividad falló')),
                ('related_object_type', models.CharField(blank=True, help_text='Tipo de objeto relacionado', max_length=50)),
                ('related_object_id', models.CharField(blank=True, help_text='ID del objeto relacionado', max_length=50)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payroll_activities', to=settings.AUTH_USER_MODEL)),
                ('closure', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activity_logs', to='payroll.payrollclosure')),
            ],
            options={
                'verbose_name': 'Log de Actividad',
                'verbose_name_plural': 'Logs de Actividad',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PayrollFileUpload',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('status_changed_at', models.DateTimeField(auto_now_add=True)),
                ('status_history', models.JSONField(blank=True, default=list)),
                ('original_filename', models.CharField(max_length=255)),
                ('file_size', models.BigIntegerField()),
                ('checksum_md5', models.CharField(max_length=32)),
                ('mime_type', models.CharField(blank=True, max_length=100)),
                ('file_type', models.CharField(choices=[('LIBRO_REMUNERACIONES', 'Libro de Remuneraciones'), ('MOVIMIENTOS_MES', 'Movimientos del Mes'), ('FINIQUITOS', 'Finiquitos'), ('INGRESOS', 'Ingresos'), ('INCIDENCIAS', 'Incidencias (Ausentismos)'), ('NOVEDADES', 'Novedades')], help_text='Tipo de archivo subido', max_length=25)),
                ('file', models.FileField(help_text='Archivo Excel subido', upload_to=payroll.models.base.generate_upload_path)),
                ('status', models.CharField(choices=[('PENDING', 'Pendiente'), ('UPLOADING', 'Subiendo'), ('UPLOADED', 'Subido'), ('PARSING', 'Analizando'), ('PARSED', 'Analizado'), ('VALIDATED', 'Validado'), ('ERROR', 'Error'), ('CANCELLED', 'Cancelado')], default='PENDING', max_length=20)),
                ('version', models.IntegerField(default=1, help_text='Versión del archivo (incrementa en re-uploads)')),
                ('parsing_started_at', models.DateTimeField(blank=True, null=True)),
                ('parsing_completed_at', models.DateTimeField(blank=True, null=True)),
                ('parsing_duration', models.DurationField(blank=True, null=True)),
                ('total_rows_parsed', models.IntegerField(default=0, help_text='Número total de filas procesadas')),
                ('total_employees_found', models.IntegerField(default=0, help_text='Número de empleados encontrados')),
                ('parsing_errors', models.JSONField(default=list, help_text='Errores encontrados durante el parsing')),
                ('parsing_warnings', models.JSONField(default=list, help_text='Advertencias durante el parsing')),
                ('data_preview', models.JSONField(default=list, help_text='Preview de los primeros datos parseados')),
                ('redis_cache_key', models.CharField(blank=True, help_text='Key de Redis para datos parseados', max_length=150)),
                ('celery_task_id', models.CharField(blank=True, help_text='ID de la task de Celery para tracking', max_length=50)),
                ('retention_days', models.IntegerField(default=180, help_text='Días de retención del archivo')),
                ('is_compressed', models.BooleanField(default=False, help_text='Si el archivo está comprimido')),
                ('archived_location', models.CharField(blank=True, help_text='Ubicación si está archivado (S3, etc.)', max_length=255)),
                ('closure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='file_uploads', to='payroll.payrollclosure')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL)),
                ('status_changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_status_changes', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Archivo de Nómina',
                'verbose_name_plural': 'Archivos de Nómina',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ParsedDataStorage',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('parsed_data', models.JSONField(help_text='Datos parseados completos del archivo')),
                ('parsing_metadata', models.JSONField(default=dict, help_text='Metadata sobre el proceso de parsing')),
                ('expires_at', models.DateTimeField(help_text='Fecha de expiración de los datos')),
                ('is_cached_in_redis', models.BooleanField(default=False, help_text='Si los datos están actualmente en Redis')),
                ('last_accessed', models.DateTimeField(auto_now=True, help_text='Última vez que se accedieron los datos')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('file_upload', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='parsed_storage', to='payroll.payrollfileupload')),
            ],
            options={
                'verbose_name': 'Datos Parseados',
                'verbose_name_plural': 'Datos Parseados',
            },
        ),
        migrations.CreateModel(
            name='PerformanceLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('operation_name', models.CharField(help_text='Nombre de la operación', max_length=100)),
                ('operation_type', models.CharField(choices=[('FILE_PARSING', 'Análisis de Archivo'), ('VALIDATION', 'Validación'), ('CONSOLIDATION', 'Consolidación'), ('COMPARISON', 'Comparación'), ('REPORT_GENERATION', 'Generación de Reportes'), ('DATABASE_QUERY', 'Consulta de Base de Datos'), ('REDIS_OPERATION', 'Operación Redis'), ('API_REQUEST', 'Petición API'), ('TASK_EXECUTION', 'Ejecución de Tarea')], max_length=30)),
                ('execution_time_ms', models.IntegerField(help_text='Tiempo de ejecución en milisegundos')),
                ('memory_usage_mb', models.FloatField(blank=True, help_text='Uso de memoria en MB', null=True)),
                ('cpu_usage_percent', models.FloatField(blank=True, help_text='Uso de CPU en porcentaje', null=True)),
                ('records_processed', models.IntegerField(default=0, help_text='Cantidad de registros procesados')),
                ('operation_size', models.CharField(blank=True, choices=[('SMALL', 'Pequeña (< 1K registros)'), ('MEDIUM', 'Media (1K - 10K registros)'), ('LARGE', 'Grande (10K - 100K registros)'), ('XLARGE', 'Muy Grande (> 100K registros)')], max_length=20)),
                ('server_name', models.CharField(blank=True, help_text='Nombre del servidor', max_length=50)),
                ('worker_name', models.CharField(blank=True, help_text='Nombre del worker (si es tarea Celery)', max_length=50)),
                ('is_successful', models.BooleanField(default=True, help_text='Si la operación fue exitosa')),
                ('error_type', models.CharField(blank=True, help_text='Tipo de error si falló', max_length=50)),
                ('operation_metadata', models.JSONField(default=dict, help_text='Metadata adicional de la operación')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Log de Rendimiento',
                'verbose_name_plural': 'Logs de Rendimiento',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RedisCache',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('cache_key', models.CharField(help_text='Key de Redis', max_length=200, unique=True)),
                ('cache_type', models.CharField(choices=[('FILE_PARSED_DATA', 'Datos de Archivo Parseados'), ('VALIDATION_PROGRESS', 'Progreso de Validación'), ('CLOSURE_STATUS', 'Estado de Cierre'), ('TASK_PROGRESS', 'Progreso de Tarea'), ('DISCREPANCY_CACHE', 'Cache de Discrepancias'), ('CONSOLIDATED_DATA', 'Datos Consolidados'), ('REPORT_CACHE', 'Cache de Reportes'), ('SESSION_DATA', 'Datos de Sesión'), ('TEMP_DATA', 'Datos Temporales')], max_length=30)),
                ('related_closure_id', models.IntegerField(blank=True, help_text='ID del cierre relacionado', null=True)),
                ('related_object_type', models.CharField(blank=True, help_text='Tipo de objeto relacionado', max_length=50)),
                ('related_object_id', models.CharField(blank=True, help_text='ID del objeto relacionado', max_length=50)),
                ('data_size_bytes', models.BigIntegerField(default=0, help_text='Tamaño de los datos en bytes')),
                ('data_structure', models.CharField(choices=[('STRING', 'String'), ('HASH', 'Hash'), ('LIST', 'List'), ('SET', 'Set'), ('JSON', 'JSON')], default='JSON', max_length=20)),
                ('ttl_seconds', models.IntegerField(blank=True, help_text='Time to Live en segundos', null=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='Fecha de expiración', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Si la cache está activa')),
                ('last_accessed', models.DateTimeField(auto_now=True, help_text='Último acceso a la cache')),
                ('access_count', models.IntegerField(default=0, help_text='Cantidad de veces accedida')),
                ('description', models.TextField(blank=True, help_text='Descripción del contenido de la cache')),
                ('cache_metadata', models.JSONField(default=dict, help_text='Metadata adicional de la cache')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Cache Redis',
                'verbose_name_plural': 'Caches Redis',
                'ordering': ['-last_accessed'],
            },
        ),
        migrations.CreateModel(
            name='ValidationRule',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('name', models.CharField(help_text='Nombre de la regla', max_length=100)),
                ('description', models.TextField(help_text='Descripción de la regla')),
                ('validation_type', models.CharField(choices=[('EMPLOYEE_MATCHING', 'Coincidencia de Empleados'), ('CONCEPT_VALIDATION', 'Validación de Conceptos'), ('AMOUNT_COMPARISON', 'Comparación de Montos'), ('DATE_VALIDATION', 'Validación de Fechas'), ('CUSTOM_RULE', 'Regla Personalizada')], max_length=30)),
                ('rule_config', models.JSONField(default=dict, help_text='Configuración específica de la regla')),
                ('default_severity', models.CharField(choices=[('LOW', 'Baja'), ('MEDIUM', 'Media'), ('HIGH', 'Alta'), ('CRITICAL', 'Crítica')], default='MEDIUM', max_length=10)),
                ('is_active', models.BooleanField(default=True, help_text='Si la regla está activa')),
                ('execution_order', models.IntegerField(default=100, help_text='Orden de ejecución (menor número = primero)')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Regla de Validación',
                'verbose_name_plural': 'Reglas de Validación',
                'ordering': ['execution_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ValidationRun',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('status_changed_at', models.DateTimeField(auto_now_add=True)),
                ('status_history', models.JSONField(blank=True, default=list)),
                ('validation_type', models.CharField(choices=[('LIBRO_VS_NOVEDADES', 'Libro vs Novedades'), ('MOVIMIENTOS_VS_ANALISTA', 'Movimientos vs Archivos Analista'), ('FULL_VALIDATION', 'Validación Completa'), ('CUSTOM', 'Validación Personalizada')], default='FULL_VALIDATION', max_length=30)),
                ('status', models.CharField(choices=[('PENDING', 'Pendiente'), ('RUNNING', 'Ejecutando'), ('COMPLETED', 'Completada'), ('FAILED', 'Falló'), ('CANCELLED', 'Cancelada')], default='PENDING', max_length=20)),
                ('source_files', models.JSONField(default=list, help_text='IDs de archivos fuente para la validación')),
                ('total_records_processed', models.IntegerField(default=0, help_text='Total de registros procesados')),
                ('total_discrepancies_found', models.IntegerField(default=0, help_text='Total de discrepancias encontradas')),
                ('critical_discrepancies', models.IntegerField(default=0, help_text='Discrepancias críticas encontradas')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('validation_config', models.JSONField(default=dict, help_text='Configuración específica de la validación')),
                ('validation_summary', models.JSONField(default=dict, help_text='Resumen de resultados de la validación')),
                ('error_details', models.JSONField(blank=True, help_text='Detalles de errores si la validación falló', null=True)),
                ('celery_task_id', models.CharField(blank=True, help_text='ID de la tarea de Celery', max_length=50)),
                ('redis_progress_key', models.CharField(blank=True, help_text='Key de Redis para progreso en tiempo real', max_length=100)),
                ('closure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='validation_runs', to='payroll.payrollclosure')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL)),
                ('status_changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_status_changes', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Ejecución de Validación',
                'verbose_name_plural': 'Ejecuciones de Validación',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='DiscrepancyResult',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('discrepancy_type', models.CharField(choices=[('EMPLOYEE_MISMATCH', 'Empleado no coincide'), ('AMOUNT_DIFFERENCE', 'Diferencia en montos'), ('MISSING_CONCEPT', 'Concepto faltante'), ('EXTRA_CONCEPT', 'Concepto extra'), ('DATE_MISMATCH', 'Fecha no coincide'), ('STATUS_DIFFERENCE', 'Estado diferente')], max_length=30)),
                ('severity', models.CharField(choices=[('LOW', 'Baja'), ('MEDIUM', 'Media'), ('HIGH', 'Alta'), ('CRITICAL', 'Crítica')], default='MEDIUM', max_length=10)),
                ('employee_rut', models.CharField(help_text='RUT del empleado afectado', max_length=12)),
                ('employee_name', models.CharField(help_text='Nombre del empleado afectado', max_length=200)),
                ('concept_code', models.CharField(blank=True, help_text='Código del concepto afectado', max_length=50)),
                ('concept_name', models.CharField(blank=True, help_text='Nombre del concepto afectado', max_length=100)),
                ('source_file_type', models.CharField(help_text='Tipo de archivo fuente', max_length=30)),
                ('target_file_type', models.CharField(help_text='Tipo de archivo destino', max_length=30)),
                ('source_value', models.JSONField(blank=True, help_text='Valor encontrado en archivo fuente', null=True)),
                ('target_value', models.JSONField(blank=True, help_text='Valor encontrado en archivo destino', null=True)),
                ('description', models.TextField(help_text='Descripción detallada de la discrepancia')),
                ('row_number', models.IntegerField(blank=True, help_text='Número de fila donde se encontró la discrepancia', null=True)),
                ('column_name', models.CharField(blank=True, help_text='Nombre de la columna afectada', max_length=100)),
                ('is_resolved', models.BooleanField(default=False, help_text='Si la discrepancia ha sido resuelta')),
                ('resolved_at', models.DateTimeField(blank=True, help_text='Fecha de resolución', null=True)),
                ('resolution_method', models.CharField(blank=True, choices=[('FILE_REUPLOAD', 'Re-subida de archivo'), ('MANUAL_CORRECTION', 'Corrección manual'), ('ACCEPTED_DIFFERENCE', 'Diferencia aceptada'), ('SYSTEM_CORRECTION', 'Corrección automática')], max_length=30)),
                ('resolution_notes', models.TextField(blank=True, help_text='Notas sobre la resolución')),
                ('context_data', models.JSONField(default=dict, help_text='Datos de contexto adicionales')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, help_text='Usuario que resolvió la discrepancia', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='discrepancies_resolved', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('closure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discrepancies', to='payroll.payrollclosure')),
                ('validation_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discrepancies', to='payroll.validationrun')),
            ],
            options={
                'verbose_name': 'Discrepancia',
                'verbose_name_plural': 'Discrepancias',
                'ordering': ['-created_at', 'severity'],
            },
        ),
        migrations.CreateModel(
            name='ComparisonResult',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('comparison_type', models.CharField(choices=[('EMPLOYEE_MATCH', 'Coincidencia de Empleados'), ('CONCEPT_VALUES', 'Valores de Conceptos'), ('DATE_COMPARISON', 'Comparación de Fechas'), ('STATUS_CHECK', 'Verificación de Estados')], max_length=50)),
                ('total_records_compared', models.IntegerField(default=0)),
                ('matched_records', models.IntegerField(default=0)),
                ('unmatched_records', models.IntegerField(default=0)),
                ('comparison_summary', models.JSONField(default=dict, help_text='Resumen detallado de la comparación')),
                ('comparison_config', models.JSONField(default=dict, help_text='Configuración aplicada para la comparación')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('source_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comparisons_as_source', to='payroll.payrollfileupload')),
                ('target_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comparisons_as_target', to='payroll.payrollfileupload')),
                ('validation_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comparison_results', to='payroll.validationrun')),
            ],
            options={
                'verbose_name': 'Resultado de Comparación',
                'verbose_name_plural': 'Resultados de Comparación',
            },
        ),
        migrations.CreateModel(
            name='AuditTrail',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('object_id', models.CharField(max_length=50)),
                ('action', models.CharField(choices=[('CREATE', 'Creación'), ('UPDATE', 'Actualización'), ('DELETE', 'Eliminación'), ('RESTORE', 'Restauración')], max_length=20)),
                ('old_values', models.JSONField(blank=True, help_text='Valores antes del cambio', null=True)),
                ('new_values', models.JSONField(blank=True, help_text='Valores después del cambio', null=True)),
                ('changed_fields', models.JSONField(default=list, help_text='Lista de campos que cambiaron')),
                ('change_reason', models.TextField(blank=True, help_text='Razón del cambio')),
                ('change_context', models.JSONField(default=dict, help_text='Contexto adicional del cambio')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_trails', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Rastro de Auditoría',
                'verbose_name_plural': 'Rastros de Auditoría',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['content_type', 'object_id'], name='payroll_aud_content_4f78d5_idx'), models.Index(fields=['user', 'created_at'], name='payroll_aud_user_id_4374bc_idx'), models.Index(fields=['action'], name='payroll_aud_action_9d8867_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='payrollclosure',
            index=models.Index(fields=['cliente', 'periodo'], name='payroll_pay_cliente_b8cf14_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollclosure',
            index=models.Index(fields=['status'], name='payroll_pay_status_6f43e0_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollclosure',
            index=models.Index(fields=['fase_actual'], name='payroll_pay_fase_ac_9e039b_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollclosure',
            index=models.Index(fields=['analista_responsable'], name='payroll_pay_analist_38e8af_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollclosure',
            index=models.Index(fields=['fecha_inicio'], name='payroll_pay_fecha_i_c28545_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='payrollclosure',
            unique_together={('cliente', 'periodo')},
        ),
        migrations.AddIndex(
            model_name='payrollactivitylog',
            index=models.Index(fields=['closure', 'created_at'], name='payroll_pay_closure_341eeb_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollactivitylog',
            index=models.Index(fields=['user', 'created_at'], name='payroll_pay_user_id_e9976a_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollactivitylog',
            index=models.Index(fields=['activity_type'], name='payroll_pay_activit_94b5eb_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollactivitylog',
            index=models.Index(fields=['is_successful'], name='payroll_pay_is_succ_5288bd_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollactivitylog',
            index=models.Index(fields=['related_object_type', 'related_object_id'], name='payroll_pay_related_13a0dc_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollfileupload',
            index=models.Index(fields=['closure', 'file_type'], name='payroll_pay_closure_7f3759_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollfileupload',
            index=models.Index(fields=['status'], name='payroll_pay_status_2e9efd_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollfileupload',
            index=models.Index(fields=['parsing_completed_at'], name='payroll_pay_parsing_44ebed_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollfileupload',
            index=models.Index(fields=['celery_task_id'], name='payroll_pay_celery__597250_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='payrollfileupload',
            unique_together={('closure', 'file_type', 'version')},
        ),
        migrations.AddIndex(
            model_name='parseddatastorage',
            index=models.Index(fields=['expires_at'], name='payroll_par_expires_1dc4b2_idx'),
        ),
        migrations.AddIndex(
            model_name='parseddatastorage',
            index=models.Index(fields=['is_cached_in_redis'], name='payroll_par_is_cach_ee48ee_idx'),
        ),
        migrations.AddIndex(
            model_name='parseddatastorage',
            index=models.Index(fields=['last_accessed'], name='payroll_par_last_ac_171282_idx'),
        ),
        migrations.AddIndex(
            model_name='performancelog',
            index=models.Index(fields=['operation_type', 'created_at'], name='payroll_per_operati_41a348_idx'),
        ),
        migrations.AddIndex(
            model_name='performancelog',
            index=models.Index(fields=['operation_name'], name='payroll_per_operati_ce9479_idx'),
        ),
        migrations.AddIndex(
            model_name='performancelog',
            index=models.Index(fields=['execution_time_ms'], name='payroll_per_executi_d1e8be_idx'),
        ),
        migrations.AddIndex(
            model_name='performancelog',
            index=models.Index(fields=['is_successful'], name='payroll_per_is_succ_6454ae_idx'),
        ),
        migrations.AddIndex(
            model_name='rediscache',
            index=models.Index(fields=['cache_key'], name='payroll_red_cache_k_9c7db8_idx'),
        ),
        migrations.AddIndex(
            model_name='rediscache',
            index=models.Index(fields=['cache_type'], name='payroll_red_cache_t_febc07_idx'),
        ),
        migrations.AddIndex(
            model_name='rediscache',
            index=models.Index(fields=['related_closure_id'], name='payroll_red_related_4e8f1e_idx'),
        ),
        migrations.AddIndex(
            model_name='rediscache',
            index=models.Index(fields=['is_active'], name='payroll_red_is_acti_984f2d_idx'),
        ),
        migrations.AddIndex(
            model_name='rediscache',
            index=models.Index(fields=['expires_at'], name='payroll_red_expires_1fe005_idx'),
        ),
        migrations.AddIndex(
            model_name='validationrule',
            index=models.Index(fields=['validation_type'], name='payroll_val_validat_a398df_idx'),
        ),
        migrations.AddIndex(
            model_name='validationrule',
            index=models.Index(fields=['is_active', 'execution_order'], name='payroll_val_is_acti_528c61_idx'),
        ),
        migrations.AddIndex(
            model_name='validationrun',
            index=models.Index(fields=['closure', 'status'], name='payroll_val_closure_135947_idx'),
        ),
        migrations.AddIndex(
            model_name='validationrun',
            index=models.Index(fields=['validation_type'], name='payroll_val_validat_9546d2_idx'),
        ),
        migrations.AddIndex(
            model_name='validationrun',
            index=models.Index(fields=['started_at'], name='payroll_val_started_67014c_idx'),
        ),
        migrations.AddIndex(
            model_name='validationrun',
            index=models.Index(fields=['celery_task_id'], name='payroll_val_celery__f37e72_idx'),
        ),
        migrations.AddIndex(
            model_name='discrepancyresult',
            index=models.Index(fields=['closure', 'is_resolved'], name='payroll_dis_closure_c4e5b3_idx'),
        ),
        migrations.AddIndex(
            model_name='discrepancyresult',
            index=models.Index(fields=['validation_run'], name='payroll_dis_validat_f18073_idx'),
        ),
        migrations.AddIndex(
            model_name='discrepancyresult',
            index=models.Index(fields=['discrepancy_type'], name='payroll_dis_discrep_af990e_idx'),
        ),
        migrations.AddIndex(
            model_name='discrepancyresult',
            index=models.Index(fields=['severity'], name='payroll_dis_severit_5bbb42_idx'),
        ),
        migrations.AddIndex(
            model_name='discrepancyresult',
            index=models.Index(fields=['employee_rut'], name='payroll_dis_employe_a27adc_idx'),
        ),
        migrations.AddIndex(
            model_name='discrepancyresult',
            index=models.Index(fields=['concept_code'], name='payroll_dis_concept_2434bb_idx'),
        ),
        migrations.AddIndex(
            model_name='comparisonresult',
            index=models.Index(fields=['validation_run'], name='payroll_com_validat_6a09d2_idx'),
        ),
        migrations.AddIndex(
            model_name='comparisonresult',
            index=models.Index(fields=['source_file', 'target_file'], name='payroll_com_source__a6c21e_idx'),
        ),
        migrations.AddIndex(
            model_name='comparisonresult',
            index=models.Index(fields=['comparison_type'], name='payroll_com_compari_d31fb7_idx'),
        ),
    ]
