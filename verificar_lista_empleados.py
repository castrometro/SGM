#!/usr/bin/env python3
"""
Script de verificaci√≥n de sintaxis para models_informe.py
"""

def verificar_sintaxis():
    """Verifica que la sintaxis del archivo models_informe.py sea correcta"""
    
    print("üîç Verificando sintaxis de models_informe.py...")
    
    try:
        # Leer el archivo y compilar para verificar sintaxis
        with open('/root/SGM/backend/nomina/models_informe.py', 'r', encoding='utf-8') as f:
            contenido = f.read()
        
        # Compilar el c√≥digo para verificar sintaxis
        compile(contenido, 'models_informe.py', 'exec')
        
        print("‚úÖ Sintaxis correcta - No se encontraron errores")
        
        # Verificar que los m√©todos est√°n presentes
        metodos_esperados = [
            'obtener_empleados_por_criterio',
            'obtener_estadisticas_empleados',
            '_agrupar_por_campo',
            'calcular_dias_trabajados_por_empleado',
            'obtener_comparacion_mes_anterior'
        ]
        
        print("\nüîç Verificando m√©todos implementados:")
        for metodo in metodos_esperados:
            if f'def {metodo}(' in contenido:
                print(f"   ‚úÖ {metodo}")
            else:
                print(f"   ‚ùå {metodo} - NO ENCONTRADO")
        
        # Verificar estructura de datos de empleados
        print("\nüìä Verificando estructura de datos de empleados...")
        
        if '_generar_lista_empleados' in contenido:
            print("   ‚úÖ M√©todo _generar_lista_empleados encontrado")
        else:
            print("   ‚ùå M√©todo _generar_lista_empleados NO encontrado")
        
        # Contar l√≠neas de c√≥digo
        lineas = contenido.split('\n')
        lineas_codigo = [l for l in lineas if l.strip() and not l.strip().startswith('#')]
        
        print(f"\nüìà Estad√≠sticas del archivo:")
        print(f"   ‚Ä¢ Total l√≠neas: {len(lineas)}")
        print(f"   ‚Ä¢ L√≠neas de c√≥digo: {len(lineas_codigo)}")
        print(f"   ‚Ä¢ Tama√±o: {len(contenido) / 1024:.1f} KB")
        
        # Verificar que no hay problemas comunes
        problemas = []
        
        # Verificar par√©ntesis balanceados
        contador_parentesis = contenido.count('(') - contenido.count(')')
        if contador_parentesis != 0:
            problemas.append(f"Par√©ntesis desbalanceados: {contador_parentesis}")
        
        # Verificar llaves balanceadas
        contador_llaves = contenido.count('{') - contenido.count('}')
        if contador_llaves != 0:
            problemas.append(f"Llaves desbalanceadas: {contador_llaves}")
        
        # Verificar corchetes balanceados
        contador_corchetes = contenido.count('[') - contenido.count(']')
        if contador_corchetes != 0:
            problemas.append(f"Corchetes desbalanceados: {contador_corchetes}")
        
        if problemas:
            print(f"\n‚ö†Ô∏è  Posibles problemas detectados:")
            for problema in problemas:
                print(f"   ‚Ä¢ {problema}")
        else:
            print(f"\n‚úÖ No se detectaron problemas estructurales")
        
        # Verificar imports cr√≠ticos
        imports_criticos = [
            'from django.db import models',
            'from django.utils import timezone',
            'from django.db.models import Sum, Count, Avg, Max, Min, Q'
        ]
        
        print(f"\nüì¶ Verificando imports:")
        for imp in imports_criticos:
            if imp in contenido:
                print(f"   ‚úÖ {imp}")
            else:
                print(f"   ‚ùå {imp} - NO ENCONTRADO")
        
        return True
        
    except SyntaxError as e:
        print(f"‚ùå Error de sintaxis encontrado:")
        print(f"   L√≠nea {e.lineno}: {e.text}")
        print(f"   Error: {e.msg}")
        return False
        
    except Exception as e:
        print(f"‚ùå Error al verificar archivo: {e}")
        return False

def mostrar_resumen_funcionalidades():
    """Muestra un resumen de las funcionalidades implementadas"""
    
    print("\n" + "="*60)
    print("üìã RESUMEN DE FUNCIONALIDADES DE LISTA DE EMPLEADOS")
    print("="*60)
    
    funcionalidades = [
        {
            'nombre': 'Lista B√°sica de Empleados',
            'descripcion': 'Genera lista detallada con m√©tricas individuales',
            'metodo': '_generar_lista_empleados()',
            'datos': ['nombre', 'cargo', 'remuneraci√≥n', 'ausencias', 'afiliaciones']
        },
        {
            'nombre': 'Filtros por Criterio', 
            'descripcion': 'Filtra empleados seg√∫n m√∫ltiples criterios',
            'metodo': 'obtener_empleados_por_criterio()',
            'datos': ['con_ausencias', 'sin_ausencias', 'ingresos', 'finiquitos', 'alta_remuneracion']
        },
        {
            'nombre': 'Estad√≠sticas Avanzadas',
            'descripcion': 'Calcula estad√≠sticas detalladas del personal',
            'metodo': 'obtener_estadisticas_empleados()',
            'datos': ['remuneraci√≥n', 'ausentismo', 'distribuci√≥n', 'rangos_salariales']
        },
        {
            'nombre': 'D√≠as Trabajados',
            'descripcion': 'Calcula d√≠as efectivos con vacaciones chilenas',
            'metodo': 'calcular_dias_trabajados_por_empleado()',
            'datos': ['d√≠as_laborales', 'ausencias', 'eficiencia', 'promedios']
        },
        {
            'nombre': 'Agrupaci√≥n de Datos',
            'descripcion': 'Agrupa empleados por campos espec√≠ficos',
            'metodo': '_agrupar_por_campo()',
            'datos': ['centro_costo', 'cargo', 'tipo_salud', 'campos_anidados']
        }
    ]
    
    for i, func in enumerate(funcionalidades, 1):
        print(f"\n{i}Ô∏è‚É£ {func['nombre']}")
        print(f"   üìù {func['descripcion']}")
        print(f"   üîß M√©todo: {func['metodo']}")
        print(f"   üìä Datos: {', '.join(func['datos'])}")
    
    print(f"\nüéØ CASOS DE USO PRINCIPALES:")
    casos_uso = [
        "API REST para frontend con lista paginada",
        "Reportes ejecutivos con estad√≠sticas",
        "An√°lisis de ausentismo por empleado",
        "Segmentaci√≥n salarial y beneficios",
        "C√°lculos de productividad laboral"
    ]
    
    for caso in casos_uso:
        print(f"   ‚Ä¢ {caso}")
    
    print(f"\n‚ö° OPTIMIZACIONES INCLUIDAS:")
    optimizaciones = [
        "Datos pre-calculados en JSON para rapidez",
        "Filtros en memoria sin consultas adicionales",
        "Estad√≠sticas con algoritmos eficientes",
        "Manejo de campos anidados autom√°tico",
        "Compatibilidad con feriados chilenos"
    ]
    
    for opt in optimizaciones:
        print(f"   ‚ö° {opt}")

if __name__ == "__main__":
    print("üöÄ VERIFICADOR DE LISTA DE EMPLEADOS - SGM N√ìMINA")
    print("="*60)
    
    if verificar_sintaxis():
        mostrar_resumen_funcionalidades()
        
        print("\n" + "="*60)
        print("‚úÖ VERIFICACI√ìN COMPLETADA EXITOSAMENTE")
        print("="*60)
        print("\nüéâ El sistema de lista de empleados est√° listo para usar!")
        print("üìù Pr√≥ximos pasos:")
        print("   1. Probar con datos reales de n√≥mina")
        print("   2. Integrar en API REST")
        print("   3. Crear frontend para visualizaci√≥n")
        print("   4. Implementar paginaci√≥n y b√∫squeda")
    else:
        print("\n‚ùå Se encontraron errores que deben corregirse")
