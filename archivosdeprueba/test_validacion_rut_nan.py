#!/usr/bin/env python3
"""
Test de validaci√≥n de RUTs para detectar valores NaN y filas de totales de Talana

Este script prueba la nueva funci√≥n _es_rut_valido() implementada en LibroRemuneraciones.py
para asegurar que detecta correctamente valores inv√°lidos que pueden causar confusi√≥n
en el procesamiento de empleados.
"""

import pandas as pd
import numpy as np
import sys
import os
import django

# Configurar Django
sys.path.append('/root/SGM')
os.chdir('/root/SGM')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

# Importar la funci√≥n a testear
from backend.nomina.utils.LibroRemuneraciones import _es_rut_valido

def test_rut_valido():
    """Prueba la funci√≥n _es_rut_valido con diferentes casos"""
    
    print("üß™ TESTING FUNCI√ìN _es_rut_valido()")
    print("="*60)
    
    # Casos de prueba
    casos_prueba = [
        # Casos V√ÅLIDOS
        ("12345678-9", True, "RUT v√°lido con gui√≥n"),
        ("12345678", True, "RUT v√°lido sin gui√≥n"),  
        ("1234567890", True, "RUT v√°lido largo"),
        ("   12345678-9   ", True, "RUT v√°lido con espacios (se limpia)"),
        
        # Casos INV√ÅLIDOS
        (None, False, "None"),
        (np.nan, False, "NumPy NaN"),
        (pd.NA, False, "Pandas NA"),
        ("", False, "String vac√≠o"),
        ("   ", False, "Solo espacios"),
        ("nan", False, "String 'nan' min√∫sculas"),
        ("NaN", False, "String 'NaN' may√∫sculas"),
        ("NAN", False, "String 'NAN' may√∫sculas"),
        ("total", False, "Palabra 'total'"),
        ("TOTAL", False, "Palabra 'TOTAL' may√∫sculas"),
        ("totales", False, "Palabra 'totales'"),
        ("suma", False, "Palabra 'suma'"),
        ("SUMA", False, "Palabra 'SUMA' may√∫sculas"),
        ("sumatoria", False, "Palabra 'sumatoria'"),
        ("resumen", False, "Palabra 'resumen'"),
        ("consolidado", False, "Palabra 'consolidado'"),
        ("subtotal", False, "Palabra 'subtotal'"),
    ]
    
    resultados_correctos = 0
    total_casos = len(casos_prueba)
    
    for valor, esperado, descripcion in casos_prueba:
        resultado = _es_rut_valido(valor)
        estado = "‚úÖ" if resultado == esperado else "‚ùå"
        
        print(f"{estado} {descripcion}: '{valor}' -> {resultado} (esperado: {esperado})")
        
        if resultado == esperado:
            resultados_correctos += 1
        else:
            print(f"   ‚ùå ERROR: Se esperaba {esperado} pero se obtuvo {resultado}")
    
    print("="*60)
    print(f"RESUMEN: {resultados_correctos}/{total_casos} casos correctos")
    
    if resultados_correctos == total_casos:
        print("üéâ ¬°Todos los casos de prueba pasaron correctamente!")
        return True
    else:
        print(f"‚ö†Ô∏è  {total_casos - resultados_correctos} casos fallaron")
        return False

def test_pandas_dataframe():
    """Prueba con un DataFrame de pandas simulando datos de Talana"""
    
    print("\nüß™ TESTING CON DATAFRAME DE PANDAS (simulando Talana)")
    print("="*60)
    
    # Crear DataFrame simulando datos de Talana con filas problem√°ticas
    data = {
        'A√±o': [2024, 2024, 2024, 2024, 2024],
        'Mes': [12, 12, 12, 12, 12],
        'Rut de la Empresa': ['76123456-7', '76123456-7', '76123456-7', '76123456-7', '76123456-7'],
        'Rut del Trabajador': ['12345678-9', '98765432-1', np.nan, 'TOTAL', '11223344-5'],
        'Nombre': ['Juan P√©rez', 'Mar√≠a Gonz√°lez', 'TOTALES', 'SUMA GENERAL', 'Carlos Silva'],
        'Apellido Paterno': ['P√©rez', 'Gonz√°lez', '', '', 'Silva'],
        'Apellido Materno': ['L√≥pez', 'Mart√≠nez', '', '', 'Rojas'],
        'Sueldo Base': [500000, 600000, 1100000, 1100000, 450000]
    }
    
    df = pd.DataFrame(data)
    print("DataFrame de prueba:")
    print(df)
    print()
    
    filas_validas = 0
    filas_invalidas = 0
    
    print("Procesando filas:")
    for index, row in df.iterrows():
        rut_raw = row['Rut del Trabajador']
        es_valido = _es_rut_valido(rut_raw)
        estado = "‚úÖ PROCESAR" if es_valido else "‚ùå IGNORAR"
        
        print(f"Fila {index + 1}: RUT '{rut_raw}' -> {estado}")
        
        if es_valido:
            filas_validas += 1
        else:
            filas_invalidas += 1
    
    print("="*60)
    print(f"RESUMEN DATAFRAME:")
    print(f"  - Filas v√°lidas (a procesar): {filas_validas}")
    print(f"  - Filas inv√°lidas (ignorar): {filas_invalidas}")
    print(f"  - Total filas: {len(df)}")
    
    # Verificar que se ignoren las filas correctas (filas 2, 3 y 4 del DataFrame)
    expected_valid = 2  # Solo filas 0 y 4 deber√≠an ser v√°lidas
    expected_invalid = 3  # Filas 1, 2 y 3 deber√≠an ser inv√°lidas
    
    if filas_validas == expected_valid and filas_invalidas == expected_invalid:
        print("üéâ ¬°El filtrado de DataFrame funciona correctamente!")
        return True
    else:
        print(f"‚ö†Ô∏è  Filtrado incorrecto. Esperado: {expected_valid} v√°lidas, {expected_invalid} inv√°lidas")
        return False

def main():
    """Ejecutar todas las pruebas"""
    print("üîç VALIDACI√ìN DE RUT NaN - PROTECCI√ìN CONTRA TOTALES DE TALANA")
    print("="*60)
    print("Prop√≥sito: Evitar procesar filas de totales que Talana coloca al final")
    print("="*60)
    
    test1_ok = test_rut_valido()
    test2_ok = test_pandas_dataframe()
    
    print("\n" + "="*60)
    print("RESULTADO FINAL:")
    
    if test1_ok and test2_ok:
        print("üéâ ¬°TODAS LAS PRUEBAS PASARON! La validaci√≥n de RUT funciona correctamente.")
        print("‚úÖ Las filas con RUT NaN, vac√≠o o palabras como 'TOTAL' ser√°n ignoradas")
        print("‚úÖ Esto evitar√° confusi√≥n cuando Talana coloque filas de totales")
        return True
    else:
        print("‚ùå ALGUNAS PRUEBAS FALLARON. Revisar la implementaci√≥n.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
